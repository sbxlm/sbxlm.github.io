import{_ as i,c as p,a2 as g,o as s}from"./chunks/framework.BDLWvHlL.js";const m="/images/image-20240831151823884.webp",t="/images/image-20240831151850561.webp",e="/images/image-20240831151932905.webp",o="/images/image-20240831152054088.webp",n="/images/image-20240831152223586.webp",l="/images/image-20240831152250192.webp",r="/images/image-20240831153943122.webp",_="/images/image-20240831153913401.webp",c="/images/image-20240831154025697.webp",d="/images/image-20240831154054777.webp",z="/images/image-20240831154530290.webp",y="/images/image-20240831154600410.webp",u="/images/image-20240831155805513.webp",h="/images/image-20240831155832898.webp",b="/images/image-20240831155858033.webp",f="/images/image-20240831154714697.webp",k="/images/image-20240831154751193.webp",x="/images/image-20240831160151130.webp",D=JSON.parse('{"title":"如何用好简拼","description":"","frontmatter":{"title":"如何用好简拼","tags":["简拼","拼音","技巧"],"typora-root-url":"..\\\\..\\\\public","date":"2024-08-31T15:12:23.000Z"},"headers":[],"relativePath":"posts/如何用好简拼.md","filePath":"posts/如何用好简拼.md"}'),$={name:"posts/如何用好简拼.md"};function j(T,a,v,B,N,P){return s(),p("div",null,a[0]||(a[0]=[g('<p>对于简拼的使用，拼音输入法用户往往是又爱又恨，爱恨交加。全拼用户经常会或多或少地使用简拼，以便提高输入效率。但是，过度的依赖简拼也会产生问题。如果翻车，那么则会欲速则不达，弄巧成拙，反而浪费了时间，降低了输入速度。如何才能用好简拼，利用好它的优势，而避免它的劣势呢？这就是本文想探讨的问题。</p><p>全拼用户，若不结合使用简拼，那么码长有时候是难以忍受的。特别是那些拼式长的音节，比如说 6 字母的 zhuang、chuang、shuang，5 字母的 jiang、kuang、huang 等，它们组成的词语如「状况 zhuangkuang」，全拼有 11 个字母之多，而简拼的话只需要两个字母「zk」就行了。即使可能需要翻页一次，也比输入完整的拼式快得多，具体结果因输入法而异，我测试了搜狗、百度、手心和讯飞的拼音输入法，结果如下。</p><p>搜狗拼音出现在首页。</p><p><img src="'+m+'" alt="image-20240831151823884" loading="lazy"></p><p>百度拼音出现在第二页。</p><p><img src="'+t+'" alt="image-20240831151850561" loading="lazy"></p><p><img src="'+e+'" alt="image-20240831151932905" loading="lazy"></p><p>手心拼音出现在首页。</p><p><img src="'+o+'" alt="image-20240831152054088" loading="lazy"></p><p>讯飞拼音出现在第二页。</p><p><img src="'+n+'" alt="image-20240831152223586" loading="lazy"></p><p><img src="'+l+'" alt="image-20240831152250192" loading="lazy"></p><p>如果是输入成语如「欣喜若狂」或者常用复合词组如「经济建设」等，使用简拼所能节约的用键就更加可观了。一般可以从每字 3 码降低到每字 1 码，甚至更少。比如，搜狗拼音的输入结果如下。</p><p><img src="'+r+'" alt="image-20240831153943122" loading="lazy"></p><p><img src="'+_+'" alt="image-20240831153913401" loading="lazy"></p><p><img src="'+c+'" alt="image-20240831154025697" loading="lazy"></p><p><img src="'+d+'" alt="image-20240831154054777" loading="lazy"></p><p>然而，如果想输入的是「输入方案」，那么简拼就可能得不到想要的结果。</p><p><img src="'+z+'" alt="image-20240831154530290" loading="lazy"></p><p>即使补充了末字的韵母，仍然没有出现「输入方案」，连云词库里也没有，因为第二项是「虽然方案」，接下来就是三字词了。</p><p><img src="'+y+'" alt="image-20240831154600410" loading="lazy"></p><p>为了避免浪费已经输入的编码，于是采用翻页的方法，以便找到「输入」来进行组词。结果连翻了三页才找到「输入」，有点让人崩溃。</p><p><img src="'+u+'" alt="image-20240831155805513" loading="lazy"></p><p><img src="'+h+'" alt="image-20240831155832898" loading="lazy"></p><p><img src="'+b+'" alt="image-20240831155858033" loading="lazy"></p><p>相对好点的做法是，不通过翻页查找，而是按 Tab 后输入首字的笔画作为辅助码。在输入前两笔后，「输入」就出现了。</p><p><img src="'+f+'" alt="image-20240831154714697" loading="lazy"></p><p>选择「输入」后，「方案」就是首选，直接上屏就完成了组词。</p><p><img src="'+k+'" alt="image-20240831154751193" loading="lazy"></p><p>虽然上述方法能够通过某种方式来避免简拼翻车后的用键浪费，但是却没有直接输入全拼来得方便和快捷，云词库能够在首选就出现「输入方案」一词。</p><p><img src="'+x+'" alt="image-20240831160151130" loading="lazy"></p><p>那么，问题来了。究竟用还是不用简拼呢？答案是：选择性地使用。用好了简拼可以在码长上达到媲美双拼的效果，用不好则可能适得其反。对于高频的字词和常用的词语，应该使用简拼。在前面刚才输入过不久的字词，也应该使用简拼。而对于拿不准的字词则一律采用全拼，不过有时最后的一两个字可以用简拼，然后再伺机补全，最后还可通过 Tab 引导来进行补充首字的笔画或者部件。这类方法虽然具有一定的作用，但是仍然不理想，补码方式笨拙，只能为首字补码，而且不能完全避免翻车，因此不能最充分地利用简拼来提高输入效率。</p><p>有没有更好的办法呢？能不能做到一律使用简拼，在没有命中时通过快速地逐步补码来实现绝不翻车呢？答案是肯定的，声笔简拼就完美地实现了这个目标，而且在保持简单易学的同时实现了比双拼还短得多的平均码长，可以说是拼音用户的福音。具体内容较多，请参见<a href="https://sbxlm.github.io/sbjp/" target="_blank" rel="noreferrer">https://sbxlm.github.io/sbjp/</a> 。</p>',33)]))}const E=i($,[["render",j]]);export{D as __pageData,E as default};
