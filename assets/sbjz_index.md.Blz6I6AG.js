import{_ as a,c as e,o,a5 as s,cn as t,co as r,cp as d}from"./chunks/framework.D8YseNGg.js";const f=JSON.parse('{"title":"声笔简整","description":"","frontmatter":{"title":"声笔简整","date":"2019-07-08T16:14:45.000Z","comments":false,"tags":["顶功","声笔","简整"],"typora-root-url":"..\\\\..\\\\public"},"headers":[],"relativePath":"sbjz/index.md","filePath":"docs/sbjz/index.md"}'),c={name:"sbjz/index.md"},i=s('<p>声笔简整是基于声笔简码的整句输入方案，它极其简单，没有什么学习门槛，可以用一句话概括它的内容：用v表示零声母，用<code>aeuio</code>分别表示折、横、撇、竖、点五种笔画，采用首字母简拼加笔画编码。新用户几分钟就可以学会，几小时就可以熟练掌握，稍加训练输入速度就可以上百。</p><p>声笔简整默认使用后置强顶模式，采用分词输入，与声笔简码的默认输入模式比较类似。在这种模式下，用户可以按最节省用键的方式进行输入，从而取得尽量高的输入效率。输入的基本过程是，首先输入各字的声母，观察提示，首选命中则上屏，否则追加末字笔画，在追加的同时继续观察提示，命中则上屏。在追加末字两个笔画后，若首选还没有命中，则直接补充（无需移动光标）首字的笔画，在补充的同时继续观察，命中则上屏。相比声笔简码来说，</p><ul><li>声笔简整的优点是：具有大得多的词库，更大的词组编码空间，顺滑、精确的造词能力，与其它声笔整句方案共享词库，更低的学习门槛；</li><li>而它的缺点是：不支持三顶模式，不能兼容飞系单字，系统反应速度较慢，没有快速地枚举造词能力，输入长词的时候比较麻烦。</li></ul><p>声笔简整支持的输入模式与声笔拼音是完全一样的，只是单字的编码方式和默认的模式设置不一样而已。相比声笔拼音来说，</p><ul><li>声笔简整的优点是：无需使用韵母，学习门槛工更低；离散更好，效率更高；可更平滑地升迁到声笔飞系；</li><li>而它的缺点是：更多地依赖笔画，不能在大多数情况下只使用音，对习惯拼音的人来说，不太自然，需要更多的时间来熟习笔画。</li></ul><h2 id="_1-几个例子" tabindex="-1">1 几个例子 <a class="header-anchor" href="#_1-几个例子" aria-label="Permalink to &quot;1 几个例子&quot;">​</a></h2><h3 id="_1-1-例子1" tabindex="-1">1.1 例子1 <a class="header-anchor" href="#_1-1-例子1" aria-label="Permalink to &quot;1.1 例子1&quot;">​</a></h3><p>例子1: 中文输入法是中文使用者的基础工具。</p><p>方法1: <code>中文zwoe 输入法srfo 是s_ 中文zwo 使用者syze 的d_ 基础jc_ 工具。gji.</code></p><p>方法2: <code>中文输入法zwsrF 是s_ 中文使用者zwsyZ 的d_ 基础工具。jcgj.</code></p><p>在例子中，方法1是分词颗粒度比较细的打法，而方法2是颗粒度比较粗的打法，下面会给出详细的操作过程。方法2是建立在已经使用过方法1的前提下的，类似于实际输入过程中，上文已经出现过类似的句子，所以可以通过更粗的分词了进一步压缩编码，从而节约用键。因为简整是动态调频的，用户的结果不一定会一模一样，但是并不妨碍对操作方法的理解。</p><p>使用方法1时，首先输入「中文」里两字的声母zw，观察首选不是「中文」（若能记住二简词，是不必观察的），于是追加「文」的首笔点o，还是未命中，再追加「文」的次笔横e，命中了。这时，不必空格上屏，而是接着输入「输入法」中第一个字「输」的声母s，「中文」会被顶上屏幕，接着输入「入法」的声母rf和「法」的首笔点o，首选就是「输入法」了。为什么输入三个声母后不进行观察呢？因为在默认模式下，三个声母对应的肯定是二简词和一简字的组合「虽然发」，肯定不是「输入法」，所以只需要在追加末字的首笔再观察提示。接下来，键入「是」的声母s，将「输入法」顶上屏幕，用空格键上屏一简字「是」，因为一简字是不能顶屏的。接着，输入zwo，即开始观察提示，因为简拼的二字词是三码起开始调频的，发现「中文」已经在首选。于是，键入syze，将「中文」顶上屏幕，发现首选就是所需的「使用者」。再键入d，将「使用者」顶上屏幕，并用空格上屏「的」字。然后，输入jc，发现「基础」已经是首选，二简词不能顶屏，所以用空格上屏。最后，键入gj，二简词是「国家」，于是追加「具」的首笔竖i，命中了「工具」，直接键入句号顶屏，完成整句话的输入，包括句号本身。</p><p>使用方法2时，「中文输入法」的末字声母要用大写，否则小写的f会将前四个声母对应的词「中文输入」顶上屏幕。实际上，在默认的强顶模式下，大于五字的声母都要用大写来输入，这是编码规则。因为zwsrF对应的首选正好是「中文输入法」，所以接着键入s，就将其顶上屏幕了，然后再用空格上屏「是」字。类似地，输入zwsyZ，正好命中了「中文使用者」，键入d将其顶上屏幕，用空格上屏「的」字。最后，键入jcgj，发现首选没有命中，于是追加末字首笔i，首选变成了「基础工具」，直接句号顶屏，完成全句输入。</p><h3 id="_1-2-例子2" tabindex="-1">1.2 例子2 <a class="header-anchor" href="#_1-2-例子2" aria-label="Permalink to &quot;1.2 例子2&quot;">​</a></h3><h2 id="_2-操作详解" tabindex="-1">2 操作详解 <a class="header-anchor" href="#_2-操作详解" aria-label="Permalink to &quot;2 操作详解&quot;">​</a></h2><p>获取、分词、编码、加码、补码、选重、调频、组合、固定、定位、造词</p><h3 id="_2-1-分词" tabindex="-1">2.1 分词 <a class="header-anchor" href="#_2-1-分词" aria-label="Permalink to &quot;2.1 分词&quot;">​</a></h3><h4 id="_2-1-1-必要性" tabindex="-1">2.1.1 必要性 <a class="header-anchor" href="#_2-1-1-必要性" aria-label="Permalink to &quot;2.1.1 必要性&quot;">​</a></h4><p>声笔简整在默认的后置强顶输入模式下，实际上是一个基于整句算法的字词型输入方案。所以，分词是输入任何文本的第一步，也是非常关键的一步。对于习惯传统拼音输入法且没有良好分词习惯的人来说，分词可能是一个难点。但是，分词对于中文输入来说，再怎么强调也不为过，即使采用传统拼音输入法也是如此，否则可能会严重影响拼音输入法的音字转换准确性，或者导致回改成本居高不下，甚至出现错别字，影响输入的质量。</p><h4 id="_2-1-2-定义" tabindex="-1">2.1.2 定义 <a class="header-anchor" href="#_2-1-2-定义" aria-label="Permalink to &quot;2.1.2 定义&quot;">​</a></h4><p>中文在书写上并没有显示出词与词之间的界线，但是在语文教学中和我们平常说话时中，汉语词的概念还是体现得比较充分的。在语言学上，词被定义为最小的能独立运用的语言单位，也包括能独立运用的单字。但是，在输入法中，词的定义并没有这么严格，凡是被当作一个单位来进行编码和转换的一串字就是一个词。所以，输入法中的词可能是单字、单词、短语甚至短句，但是一般不包含非汉字符号。</p><h4 id="_2-1-3-颗粒度" tabindex="-1">2.1.3 颗粒度 <a class="header-anchor" href="#_2-1-3-颗粒度" aria-label="Permalink to &quot;2.1.3 颗粒度&quot;">​</a></h4><p>根据不同的应用场景，分词的颗粒度可细可粗，以便在低打空率和高压缩率之间取得最佳的平衡。若以单字为单位来输入，则肯定不会打空，打空率为零，而且不需要分词，分词成本也为零。然而，单字用键多，重码也多，输入效率太低。现代汉语是以二字词为主导的，三字词和多字词也日益增多。声笔简整的单字输入是其弱项，更应该尽量以词为单位来进行输入，而且分词的颗粒度在可控的打空率下应当尽量地以较粗为好，因为声笔简整具有自动造词的能力，打空也是一次性的，组词成功后，就可以当成正常词组来使用了。</p><h3 id="_2-2-编码" tabindex="-1">2.2 编码 <a class="header-anchor" href="#_2-2-编码" aria-label="Permalink to &quot;2.2 编码&quot;">​</a></h3><p>编码是简整输入过程中最关键和最复杂的一步，而编码是遵循一定格式的。为了避免歧义和便于记忆，我们用下列类似正则表达式的精简方式来描述声笔简整强顶模式下字词的输入格式。</p><blockquote><p>通式：<code>s+bbb*</code></p><p>其中，<code>s = [qwrtsdfgzxcvbyphjklnm]</code>表示声母，<code>b = [aeuio]</code>表示笔画。</p></blockquote><p><code>s+bbb*</code>是最一般的通用表达式。s的个数就是词中字的个数，+表示至少有一个s，当然单字就只有一个s。接着的两个b表示末字的前两笔，从第三个b开始是补充的笔画，*表示可以有0个或者多个b，对单字来说是指第三至四笔，对词组来说则是指首字的第一至四笔。</p><p>上面的通式非常精简，但是也过于抽象，下面按照字词的类型对表达式进行分解，以期更加具体和准确。</p><blockquote><p>单字：<code>sb^b&#39;bb</code></p><p>二字词：<code>ssb&#39;^b&quot;bbbb</code></p><p>三字词：<code>sssb&#39;^b&quot;bbbb</code></p><p>四字词：<code>ssss&#39;^bb&quot;bbbb</code></p><p>多字词：<code>ssssS+&#39;^bb&quot;bbbb</code></p></blockquote><p>在表达式中，大写的S表示大写声母，<code>&#39;</code>表示起始调频位，<code>^</code>表示起始顶屏位，<code>&quot;</code>表示回头补码位。</p><h4 id="_2-2-1-动态、静态与变换" tabindex="-1">2.2.1 动态、静态与变换 <a class="header-anchor" href="#_2-2-1-动态、静态与变换" aria-label="Permalink to &quot;2.2.1 动态、静态与变换&quot;">​</a></h4><p>s和sb是静态编码，其上的单字是固定的，不变的，分别称为一简字和二简字。同样的，ss是静态编码，其上的二字词也是固定的，不变的，称为二简词。sss上安排的是二简词和一简字的组合，而不是一般的词组，有助于盲打。其它的码位都是动态的，其上的字词会随着使用而发生变化，不断适应用户的使用习惯，以使得平均码长最短，从而提高输入效率。</p><p>变换操作用于输入一简字、二简词之间的组合，也属于静态编码的范畴，熟悉后可以盲打。</p><blockquote><p>两个一简字的组合：<code>ss; =&gt; s_s_</code></p><p>一简字与二简词的组合：<code>sss; =&gt; s_ss_</code></p><p>三个一简字的组合：<code>sss&#39; =&gt; s_s_s_</code></p><p>两个二简词的组合：<code>ssss&#39; =&gt; ss_ss_</code></p></blockquote><h4 id="_2-2-2-主码、辅码与补码" tabindex="-1">2.2.2 主码、辅码与补码 <a class="header-anchor" href="#_2-2-2-主码、辅码与补码" aria-label="Permalink to &quot;2.2.2 主码、辅码与补码&quot;">​</a></h4><p>字词编码表达式中的s部分称为主码，<code>&quot;</code>之前的b称为辅码，而<code>&quot;</code>之后的b称为补码。补码实际上是输入词组时，回头补充的首字辅码。为什么要这样颠三倒四的回头补码呢？这个看似笨拙的做法却正是声笔简整在设计上的精妙之处。</p><p>简拼的使用在强顶模式下是强制性的，这和一般拼音输入法大不相同。一般拼音输入法如果强制使用简拼的话，会遇到巨大的困难，繁琐的修改将</p><h3 id="_2-3-选重" tabindex="-1">2.3 选重 <a class="header-anchor" href="#_2-3-选重" aria-label="Permalink to &quot;2.3 选重&quot;">​</a></h3><h3 id="_2-4-调频" tabindex="-1">2.4 调频 <a class="header-anchor" href="#_2-4-调频" aria-label="Permalink to &quot;2.4 调频&quot;">​</a></h3><h3 id="_2-5-定位" tabindex="-1">2.5 定位 <a class="header-anchor" href="#_2-5-定位" aria-label="Permalink to &quot;2.5 定位&quot;">​</a></h3><h3 id="_2-6-造词" tabindex="-1">2.6 造词 <a class="header-anchor" href="#_2-6-造词" aria-label="Permalink to &quot;2.6 造词&quot;">​</a></h3><p>声笔简整拥有一个巨型词库，收录了雾凇拼音的200万词组，而且还支持rime的octagram语言模型，已经具有大厂拼音输入法云词库的效果了。但是，每个用户都或多或少地需要输入一些系统未收录的词组。一般来说，用户会按自己的习惯来进行分词输入，在输入的时候并不知道系统中是否已经收录了待输入的词组。在遇到未收录的词组时，就会发生无法命中而打空的情况。</p><p>例如，若用户想输入「简词」，但是按正常输入并补码后，发现没有命中，而且从次选起都是单字了，说明系统中没有该词。</p><p><img src="'+t+'" alt="image-20240405080502081"></p><p>于是，用2选择「简」上屏。</p><p><img src="'+r+'" alt="image-20240405080524608"></p><p>接着，发现首选就是需要的「词」字。</p><p><img src="'+d+'" alt="image-20240405080556112"></p><p>这时，可以空格上屏来完成造词。但是，如果还有后续字词想输入的话，可以直接输入后续字词的首码，将「词」字顶上屏幕，而无需按空格。</p><h3 id="_2-7-数选固定" tabindex="-1">2.7 数选固定 <a class="header-anchor" href="#_2-7-数选固定" aria-label="Permalink to &quot;2.7 数选固定&quot;">​</a></h3><h2 id="_3-输入模式" tabindex="-1">3 输入模式 <a class="header-anchor" href="#_3-输入模式" aria-label="Permalink to &quot;3 输入模式&quot;">​</a></h2><p>前面介绍了声笔简整默认的后置强顶模式，它的输入效率最高，也最接近声笔简码默认的四顶模式。但是，对于习惯一般拼音整句输入法的人来说，可能会觉得很不习惯。所以，声笔简整还提供了自由、固定、混顶、纯顶几种其它模式供用户选择使用，或者用于过渡。</p><p>这些模式都可以配以前置和后置的选项。前置是传统拼音输入法的行为，编码前缀相同的字词，如果频率高，就会一直处在首选。而在后置时，已经在首选出现过的选项，在加码的时候后置，把机会留给频率紧随其后的字词，这样就能快速筛选出用户需要的重码字词了。所以，推荐用户尽量采用后置选项。</p><p>声笔简整的输入模式与声笔拼音是完全一样的，若需更详细地了解这些模式，可以参见<a href="./../sbpy/">声笔拼音</a>。由于声笔官方并不推荐用户使用声笔简整的非默认模式，所以这里就不介绍它们了。</p><h2 id="_4-隐藏选项" tabindex="-1">4 隐藏选项 <a class="header-anchor" href="#_4-隐藏选项" aria-label="Permalink to &quot;4 隐藏选项&quot;">​</a></h2><p>是否隐藏无理的数选字词</p><h2 id="_5-更多信息" tabindex="-1">5 更多信息 <a class="header-anchor" href="#_5-更多信息" aria-label="Permalink to &quot;5 更多信息&quot;">​</a></h2><p>反查、标点、混输、表情、同步、升级</p>',58),l=[i];function p(h,b,_,n,u,q){return o(),e("div",null,l)}const k=a(c,[["render",p]]);export{f as __pageData,k as default};
