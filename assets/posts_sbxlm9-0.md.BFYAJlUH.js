import{_ as s,c as e,o,a5 as c}from"./chunks/framework.CoIm10fQ.js";const m=JSON.parse('{"title":"声笔系列码9.0开发计划与开发实录","description":"","frontmatter":{"title":"声笔系列码9.0开发计划与开发实录","date":"2019-11-21T06:05:20.000Z","tags":["声笔系列码","开发","计划","实录"]},"headers":[],"relativePath":"posts/sbxlm9-0.md","filePath":"posts/sbxlm9-0.md"}'),d={name:"posts/sbxlm9-0.md"},a=c('<h2 id="写在前头" tabindex="-1">写在前头 <a class="header-anchor" href="#写在前头" aria-label="Permalink to &quot;写在前头&quot;">​</a></h2><p>自从今年7月中旬首次发布声笔系列码的小狼毫定制程序以来，声笔系列码经历了多次快速地迭代。它的功能不断增强，体系几经变化。方案从少到多，从单一的声笔简码到包含声笔拼音、声笔智能、声笔飞码、声笔快码、声笔双拼、声笔星二共七款二十多型输入法的庞大体系，再到目前精减后的声笔拼音、声笔智能、声笔简码、声笔快码、声笔飞码共五款九型输入法。</p><p>声笔系列码的发展，版本从8.0到现在的8.5，已经逐渐地成熟起来，而且吸引了一些用户在使用。为了进一步完善声笔系列码，增加开发工作的透明度，便于阶段性成果内测工作的开展，有必要对下一步的开发工作有个计划，同时对开发过程做一个记录。</p><h2 id="开发计划" tabindex="-1">开发计划 <a class="header-anchor" href="#开发计划" aria-label="Permalink to &quot;开发计划&quot;">​</a></h2><p>声笔系列码9.0版的开发工作，计划分以下两步来完成。</p><p>1 进一步缩短快码和飞码的字均码长，提高输入效率；快码和飞码的W型用S型来取代，以增加各型之间的共性，共享sb字的二码顶和sbb二字词的三码顶，共享s1b1b2b2格式的二字词，以便用户切换使用同款而不同型的方案。但是，这样一来，二字词就出现了两种编码格式，又遇到RIME平台的瓶颈。所以，第一步只能部分使用自动造词功能，sb字都不能参与造词。各型飞码和快码的编码格式如下，其中z表示飞码的部首或者快码的韵母，<code>^</code>表示起始顶屏码位。</p><ul><li>X型的编码格式：单字 <code>sb, szb^b</code>；二字词 <code>s1b1b2^b2, szsz</code>；三字词 <code>sssz</code>；多字词 <code>ssss</code></li><li>K型的编码格式：单字 <code>sb, szb^b</code>；二字词 <code>s1b1b2^b2, szs^b</code>；三字词 <code>sss^b</code>；多字词 <code>sss^S</code></li><li>S型的编码格式：单字 <code>sb, sz^bb</code>；二字词 <code>s1b1b2^b2, szSz</code>；三字词 <code>ssSz</code>；多字词 <code>ssSs</code></li></ul><p>2 修改RIME源代码，以便让sb字也参与自动造词；这项工作是比较艰巨的，可能要花费不少的时间和精力。</p><p>3 经过短时间的试用，发现在采用了sf型简词以后，已经没有必要保留X K S三型了，于是以X型为基础，将其多字词的编码格式加以改进，统一为单一的飞码和快码，不再分型了，其格式如下：</p><p>单字 <code>sb, szb^b</code>；二字词 <code>s1b1b2^b2, szsz</code>；三字词 <code>sssz</code>；多字词 <code>sssS</code></p><h2 id="开发实录" tabindex="-1">开发实录 <a class="header-anchor" href="#开发实录" aria-label="Permalink to &quot;开发实录&quot;">​</a></h2><p>开发工作从11月18日起，截止11月20日为止，已经完成了飞码的第一步工作。在声笔系列码9.0版的字词型输入法中，都不再设三码非强制性简码词，以减少人机交互，加快操作速度，这是总结输入实践经验后得出的结论。另外，将拼音反查的方法改为了以<code>a</code>引导，使得操作更加方便；删除了供声笔快码和声笔飞码用的声笔反查功能；将声笔智能的词组数量也统一为20万，和其它方案完全一样。</p><p>第二项工作的进度比预想的要快得多，截至11月23已经基本上解决了算法上的问题。但是，在如何判断当前使用的方案时遇到了棘手的问题。截止11月26日，解决了所有程序难题。另外，增加了s_b和sf简词及其滤镜提示。在词库中交换了“并不”和“叭叭”两词的北语频度。而手机上，皮肤改为支持31键，同时设Tab和Return来解决翻页问题。电脑上也改为采用这种方式翻页，以便两者的用法统一起来。这样，标点符号就可以随时顶屏了。</p><p>到29日为止已经完成了三步开发计划，进入全面测试和文档修改阶段了。截止12月5日改为多字词第四码不用大写；声笔简码也支持sf简词；声笔拼音和声笔智能增加单字笔画过滤。</p>',14),t=[a];function b(r,l,p,i,n,_){return o(),e("div",null,t)}const z=s(d,[["render",b]]);export{m as __pageData,z as default};
