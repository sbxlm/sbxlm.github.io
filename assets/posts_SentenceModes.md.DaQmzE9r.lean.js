import{_ as t,c as s,o,m as e}from"./chunks/framework.B-4__zXU.js";const x=JSON.parse('{"title":"为各款输入法增加整句模式","description":"","frontmatter":{"title":"为各款输入法增加整句模式","date":"2019-09-19T09:08:19.000Z","tags":["输入法","整句模式"]},"headers":[],"relativePath":"posts/SentenceModes.md","filePath":"posts/SentenceModes.md"}'),n={name:"posts/SentenceModes.md"},a=e("p",null,"现代主流的拼音输入法都采用整句模式，其特点是，没有复杂的编码规则，输入方式灵活多变，因而学习门坎非常低。当然，所谓的整句是指可以按整句来输入，不是说只能输入整句，以字词为单位输入也是可以的，不过使用空格来上屏的情况就很多了。按字词输入，用空格上屏对全拼来说是很自然的，但是对双拼来说就显得笨拙。",-1),c=e("p",null,"全拼整句可兼容简拼和混拼，可以设置模糊音。但是，音节的准确切分是一个比较大的问题。另一个更大的问题是用户可能养成不良的输入习惯。比如，有的用户只知道采用单字加联想来进行输入；有的用户输入二字词时习惯用一、二字的声母，然后就进行分页选重操作。殊不知，这些简单易用的操作方式，在进行大量的文本输入的时候，效率是非常低下的。并且，一旦形成习惯，就很难纠正，同时也没有人提醒他们那是低效的方式，他们的自我感觉还很好，因为他们根本就不知道还有更好的方式。考虑到输入法使用的频繁程度，这类用户在输入方面的时间浪费是惊人的。",-1),_=e("p",null,"双拼整句，可以比较自由地自定义声母和韵的组合方式，一方面可以缩短码长，另一方面可以改善手感。同时，也可以增加形码辅助或笔画筛选，从而减少重码。双拼整句也有自己的问题。首先，需要记忆双拼的翘舌声母、零声母和韵母的表示方法；如果采用形辅，则还要记忆形辅的编码。其次，不加形辅的话，重码很多，而加了形辅又会造成字码切分问题。",-1),d=e("p",null,"顶功编码做成整句输入法，即使随时添加任意个笔画辅助码都可以完全避免字码切分岐义。如果正常输入按照一字两键的方式，那么飞码和快码的126个两键字是完全确定的，可以在很大的程度上提高整句输入的准确性。简码可以构造两型整句方案，一型可以任意输入1至4码，另一型确定一、二简字，正常输入三码，必要时可用四码。声笔双拼和声笔星二可以确定一简字，正常按照一字两键输入，可以用1至2笔画进行辅助去重，也比一般的两码连打方案效果要好。",-1),l=e("p",null,"所以，声笔系列码现在增加了飞码整句、快码整句、简码整句1型、简码整句2型、声双整句和声二整句。",-1),i=e("p",null,"2019年9月24日，通过修改RIME程序实现了整句模式下的字母选重。所以，整句方案也做了一些调整，以便充分利用这个新的特性。简码整句的单字编码均改为sbb，1型可以任意输入1至3码，2型确定一简字和二简字，其它字用三码输入；两型简码整句都在三码时用aeiou来进行字母选重。其它非简码的整句输入方案，均采用两码一字的简便方法；有重码时，不再追加笔画辅助，而是直接利用aeiou来选择重码。",-1),p=[a,c,_,d,l,i];function r(u,h,m,f,M,S){return o(),s("div",null,p)}const B=t(n,[["render",r]]);export{x as __pageData,B as default};
