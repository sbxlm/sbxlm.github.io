import{_ as e,c as s,o,m as t}from"./chunks/framework.Ed2L1a2e.js";const b=JSON.parse('{"title":"声笔系列码的整句模式重新袭来","description":"","frontmatter":{"title":"声笔系列码的整句模式重新袭来","date":"2020-05-16T07:23:51.000Z","tags":["声笔","整句"]},"headers":[],"relativePath":"posts/sbxlzj.md","filePath":"posts/sbxlzj.md"}'),a={name:"posts/sbxlzj.md"},n=t("p",null,"在声笔系列中，原来就尝试过整句模式，包括前一阵常试过的声笔智能。当时希望通过追加辅助码的方式来离散重码，结果使得整句模式的学习难度增大了,而且未能利用顶功大小编码集的优势。声笔智能试图模仿拼音输入法的灵活多变，也没有利用好顶功。现在终于想到了简单有效的办法，实现了优化的简码、快码和飞码的整句模式，分别称为简整、快整和飞整。",-1),l=t("p",null,"这个简单有效的办法就是，尽量保持单字编码简单,可以用12345来定位尚未确定的编码位置，以便进行快速修改和选择，重码随时可用67890选择。同时，充分利用顶功的特点，尽量采用小编码集的aeuio代替67890来选择重码。快整和飞整的单字都只取前面两码，一简用空格补齐，实现两码连打；偶数码长时可用aeuio来选择重码。简整的单字一、二简形式不变，最长三码；三码时可用aeuio来选择重码。",-1),c=t("p",null,"这些整句方案都比对应的字词方案简单易学，只是在输入出错的时候回改比较麻烦，适合初学者或者对速度要求不高的人使用。由于输入时的编码过程简单，在不出错的时候，用户的键速一般是比较快的。所以，在输入简单文本时，整句模式还是有一定优势的。",-1),_=t("p",null,"为了提高转换的准确性，整句模式收录的词组有48万之多，比字词模式多出了32万。为了避免基础安装包过大，整句模式的方案是单独发布的。要使用整句模式的话，在安装基础包后，下载整句的扩展包，将其中的文件复制的相应的安装目录，在default.custom.yaml中加入对应的方案，重新部署一下就可以使用了。",-1),i=[n,l,c,_];function r(d,p,u,m,f,h){return o(),s("div",null,i)}const j=e(a,[["render",r]]);export{b as __pageData,j as default};
