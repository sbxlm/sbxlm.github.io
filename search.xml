<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[顶功与上屏方式]]></title>
    <url>%2F2020%2F07%2F27%2Fspfs%2F</url>
    <content type="text"><![CDATA[在顶功输入法逐步兴盛的今天，不少的输入法爱好者都来蹭顶功的热度，滥用「顶」字的现象非常普遍，造成了许多混乱，不利于人们进行有效的交流，有必要对相关的概念进行梳理，以正其名。古人云：“名正则言顺，名不正则言不顺”，此之谓也。 在输入法中，所谓「顶」是指，在不用空格的情况下，通过后续的输入将前一字词顶上屏幕，所以又称之为「顶屏」。具有顶屏的能力，就称为具有「顶功」。「顶屏」是「上屏」方式的一种，上屏就是待输入的文字离开输入法窗口插入到目标程序的插入点处。 中文编码输入的上屏方式着丰富多彩，分为选择上屏、唯一上屏和顶功上屏三大类。其中，选择上屏和顶功上屏又细分为很多子类，红色字体部分为现代顶功输入法所特有的，如下图所示。 在智能拼音输入法如搜狗拼音中，是用空格键、数字键或回车键来选择上屏的，其它非码元的字符键则可以顶屏。在字词型的输入法如五笔字型中，除了前述上屏方式外还可能有定长顶屏、唯一上屏和空码顶屏。声笔系列码则首创了现代顶功输入法的规则顶屏和复用字母选重，可以省略大量的空格键和提高键速，从而极大地提高输入法的效率。 以下就各种上屏方式，结合输入实例，进行进一步的说明。 选择上屏选择上屏的特点是，选择键本身失去了原来的作用而专用于选择。选择上屏所选择的一般是选择窗口里显示的唯一选项或者首选项，不过理论上讲也可以指定为选择候选项里的任意一项。 空格上屏用空格键来上屏是最常见的上屏方式。特别是在现代流行的拼音输入法里，几乎所有字、词、短语、句子都需要有空格来上屏，只有一些标点符号可以顶屏。在传统的字词型输入法如五笔字型中，在输入简码字词时，一般也是需要空格上屏的。 回车上屏用回车键来上屏通常用在真正的整句输入法中。这种整句输入法参照英文的做法，为了提高中文转换的准确性，是用空格来分词的，上屏则改用回车键，简称为「空格分词，回车上屏」。 选重上屏在候选项不止一个的时候，如果要上屏非第一选项或者默认选项，就需要选重上屏。所谓选重，就是选择重码字词的意思。 最常见的是用数字来选重。数字选重时，老式拼音输入法采用所有10个数字，而现代拼音输入法一般只采用其中的5个数字，已经选项太多会导致费眼，使眼睛容易疲劳，容易看漏。 但是，由于数字击打不太方便，于是有的输入法改用或者同时支持使用;和&#39;等标点符号来选重，甚至采用左右Shift键来选重。另外，在现代拼音输入法中，一般用回车键来上屏英文或者编码，也相当于选重。 为了更加便于选择重码，有的输入法还提供了字母选重的选项。例如，搜狗输入法在设置「按空格出字」的前提下，可以再设置「按字母选词」，如下图所示。但是，这样会使得所有字词的选择多按一次空格键，所以采用的人很少。 在声笔系列之类的输入法中，由于首码是声母，并且用v来表示a e o的零声母，所以不会有正常的编码以aeuio开头，当达到最大码长时，就可以用aeuio兼做重码选择键，代替传统的数字键选重，在操作上更加方便。在声笔简码中，更可以进行两级选重，即在第四码时既可以用单个的aeuio无理选择重码，也可以再追加两个笔画（即所谓的扩展编码）进一步筛选重码，然后再次用aeuio无理选择重码。一级选重简单易学，适用于初学者；而追加笔画后重码少，适用于熟练者，可以尽量减少翻页操作。 唯一上屏唯一上屏是指在编码唯一且追加任何编码字符都是空码的时候，自动将对应的字词送上屏幕，无需进行选择。在传统输入法如五笔字型中，当没有达到最大码长时，唯一上屏能够节约一个空格键，但是由于用户往往不知道哪个字词的编码是唯一的，只有通过上屏来判断，因此当操作很快时，往往会打过头。所以，并不是所有的用户都喜欢设置唯一上屏。 顶功上屏顶功上屏，简称顶屏，是指通过后续的输入将前一字词顶上屏幕，从而省去选择键，通常是空格键。顶屏的前提是被顶的字词已经完全确定。在有多个选项的时候，被顶的往往是第一个选项，当然理论上也可以将其它某一选项作为被顶的对象。 顶功上屏和选择上屏的区别是，前者的顶屏键其原来的作用不会发生变化，而后者的选择键失去了其原来的作用。比如，如果用「;」顶屏，那么在顶出字词的同时也输入了「;」，而在用「;」来选重的时候，在上屏所选的字词后，「;」本身就被“吃掉”了，就消失了。 定长顶屏定长顶屏是指达到最大码长时发生的顶屏，传统的字词型输入法都具备这种顶屏方式。比如，五笔字型就是在达到四码时，如果再输入编码，就会把第一个候选项顶上屏幕。搜狗拼音之类的智能整句输入法是不具备定长顶屏功能的，只可能用逗号、句号等非编码键来顶屏，否则一定需要选择才能上屏，通常是用空格键后者数字键选择。 非码顶屏非码顶屏就是用非编码字符顶屏。非编码字符是指不参与编码的字符，例如搜狗拼音只有26个小写英文字母参与编码。另外，用于选择重码和翻页的字符也是不可能顶屏的，比如搜狗拼音里的阿拉伯数字和+-等。 空码顶屏空码顶屏是指，当输入某个编码字符时，如果与前面已经输入的编码字符一起构成了空码，则将前面某个非空码对应的字词顶上屏幕，同时留下导致空码的字符。空码顶屏分为自由顶屏和规则顶屏，自由顶屏建设不规则的顶屏。 自由顶屏由于自由顶屏是不规则的，无法简单地预知可顶的位置，所以操作起来是很困难的，基本上没有实用性，也未见到有输入法使用。 规则顶屏规则顶屏是真正的顶功输入法顶屏方式。传统输入法虽然可能有一些顶的成分，如定长顶屏和非码顶屏，但是称不上顶功输入法。实际上，顶功输入法可以定义为具有规则顶屏能力的输入法，其典型代表是声笔系列码。 对于规则顶屏，在N码时为空码，如果将其之前的N-1码对应的字词顶上屏幕，则称为即时顶；如果将其之前的N-K(1&lt;K&lt;N)，则称为延迟顶。例如，C42就是延迟顶，是通过第四码顶前两码对应的字上屏，留下第三、四码作为新的第一、二码。 一个输入法，如果从第N码开始顶屏，则称为N码顶输入法，最著名的是单字二码顶，如声笔飞单和声笔快单。一个输入法还可能同时存在多种顶屏模式，比如声笔简码就是单字二码顶，二字词三码顶，三字词和多字词四码顶，这种输入法称为混合顶输入法。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>顶功</tag>
        <tag>上屏方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码增加共享自定义词典]]></title>
    <url>%2F2020%2F06%2F15%2Fshared-dict%2F</url>
    <content type="text"><![CDATA[声笔系列码的字词模式方案，如声笔简码、声笔顶拼、声笔快码和声笔飞码，包括主单的声笔快单和声笔飞单，都自带了16万多条系统词组，而且都具有方便的自动造词功能。声笔系列码的整句模式方案，如声笔简整、声笔顶整、声笔快整和声笔飞整，更是自带了150多万的系统词组，并且能在使用过程中自动组词。 但是，还是有不少用户提出了自定义词典的需求。因为，他们需要的一些特殊词组是方案本身不能或者不便于造出来的，比如带数字或/和字母的词组、特别长的词组等。 由于声笔系列码在不少情况下是不允许重码的，所以用户自定义的词组不能放在系统词组的编码空间里，否则可能造成冲突而影响输入法的正常使用。经过仔细考量，决定采用u引导来解决用户自定义词组的输入问题，此处的u意为「用户」，因为它是英语的user的首字母。这不但解决了独立编码空间的问题，还解决了声笔系列码各方案共享自定义词组的问题。这是因为这些方案都不会使用aeuio作为正常中文编码的首码。目前，声笔系列码可以直接输入aeuio来通过笔画反查字词的编码，还可以通过a引导来进行拼音反查字词的编码。现在只是利用空闲首字母来增加了自定义词典功能而已。 自定义词典随声笔简码和声笔简整一道包含在为声笔系列码定制的小狼毫和同文基础安装包里。它在里面体现为一个方案，但是独立使用的价值不大，只是为其它方案服务的。它是一个dict型而非txt型的词典，当收录的词条数量大时也具有很快的查找速度。 上图所示就是自定义词典文件。在该文件开始的注释部分，说明了编码格式和注意事项。需要特别注意的是，自定义词组不能以aeuio作为首码，非首码可以为小写字母和数字，最好不要有重码，因为重码字词需要通过移动光标来选择，很不方便。同时还要强调，词组和编码之间，编码和权重（如果有的话）之间，必须是以制表符TAB分隔，不能是空格，否则会定制词典编译失败，所以最好要找一个支持制表符的编辑器来编辑自定义词典。]]></content>
      <tags>
        <tag>词典</tag>
        <tag>自定义</tag>
        <tag>共享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔顶拼正式发布]]></title>
    <url>%2F2020%2F05%2F20%2Fsbdp%2F</url>
    <content type="text"><![CDATA[声笔顶拼经过长期的酝酿和实验探索，现在终于修成正果，得以正式发布了！ 声笔顶拼是声笔系列码中与传统拼音输入法最接近的一款输入法，其目的是让现有的拼音输入法用户以最小的学习代价就能大大地提升输入的效率，是拼音输入法提速的捷径。它通过对汉语拼音的简化和巧妙的字词编码，在保持易学的前提下，既能充分利用简拼来缩短词组的码长，又能通过追加韵母来延长编码，还能用 a、e、u、i、o 代表折、横、撇、竖、捺直接追加笔画来筛选重码字词。 同时，字词的编码自带了明确的边界，当后接声母时，可以将前面的字词顶上屏幕而省略空格，从而大大提高输入效率。在码长短的时候采用静态编码，易于让常见字词的输入形成条件反射；在码长长的时候进行动态码长调整，有利于缩短平均码长。采用 a、e、u、i、o 选择重码字词，能避免使用不便击打的数字键。]]></content>
      <tags>
        <tag>顶功</tag>
        <tag>声笔</tag>
        <tag>拼音</tag>
        <tag>顶拼</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码成功实现全自动造词]]></title>
    <url>%2F2020%2F05%2F16%2Fqzdzc%2F</url>
    <content type="text"><![CDATA[原版声笔系列码具有方便的自动造词功能，但是移植到RIME后，造词变得很不方便。要么需要每个字词以空格上屏，或者选择上屏后，才能触发造词；要么需要用引导符，并将空格换成分隔符，才能造词。这是由于RIME本身对顶功输入法支持不好所造成的。现在已经通过修改定制程序彻底解决了这个问题。顶功输入法的造词也非常方便快捷了。不仅声笔系列码能用，其它顶功输入法也可以受益。 例如，原来造【声笔飞码】一词的时候，需要在【笔 bpu】【飞 fa】【码 msaa】的后面都加上空格才行。而现在这些空格都可以省略掉，即可以按照顶功的标准打法输入就行了。由于RIME是采用的枚举方式造词，会不会产生过多的废词呢？是的，的确会产生很多不需要的词。不过，新造好的词组都是临时的，会排列在重码词组的最后。只有手动选择后成会成为正式的词组而提到前面，所以这种担心是不必要的。如果今后在使用中发现RIME处理临时词组的办法不好，再想法优化就行了。自动造词的功能是绝对需要的，也是声笔系列码的精髓之一。不过就是要看得惯太极符号才行，不要眼睛里容不下沙子:)]]></content>
      <tags>
        <tag>声笔</tag>
        <tag>自动</tag>
        <tag>造词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码的整句模式重新袭来]]></title>
    <url>%2F2020%2F05%2F16%2Fsbxlzj%2F</url>
    <content type="text"><![CDATA[在声笔系列中，原来就尝试过整句模式，包括前一阵常试过的声笔智能。当时希望通过追加辅助码的方式来离散重码，结果使得整句模式的学习难度增大了,而且未能利用顶功大小编码集的优势。声笔智能试图模仿拼音输入法的灵活多变，也没有利用好顶功。现在终于想到了简单有效的办法，实现了优化的简码、快码和飞码的整句模式，分别称为简整、快整和飞整。 这个简单有效的办法就是，尽量保持单字编码简单,可以用12345来定位尚未确定的编码位置，以便进行快速修改和选择，重码随时可用67890选择。同时，充分利用顶功的特点，尽量采用小编码集的aeuio代替67890来选择重码。快整和飞整的单字都只取前面两码，一简用空格补齐，实现两码连打；偶数码长时可用aeuio来选择重码。简整的单字一、二简形式不变，最长三码；三码时可用aeuio来选择重码。 这些整句方案都比对应的字词方案简单易学，只是在输入出错的时候回改比较麻烦，适合初学者或者对速度要求不高的人使用。由于输入时的编码过程简单，在不出错的时候，用户的键速一般是比较快的。所以，在输入简单文本时，整句模式还是有一定优势的。 为了提高转换的准确性，整句模式收录的词组有48万之多，比字词模式多出了32万。为了避免基础安装包过大，整句模式的方案是单独发布的。要使用整句模式的话，在安装基础包后，下载整句的扩展包，将其中的文件复制的相应的安装目录，在default.custom.yaml中加入对应的方案，重新部署一下就可以使用了。]]></content>
      <tags>
        <tag>声笔</tag>
        <tag>整句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小狼毫声笔专版一键部署程序制作完成]]></title>
    <url>%2F2020%2F04%2F22%2Fxlhyjbs%2F</url>
    <content type="text"><![CDATA[小狼毫声笔系列码专版的安装一直是一件让人心烦的事情。虽然在教程中详细说明了安装方法，用户还是经常将声笔系列码的文件复制到了错误的文件夹，导致无法正常使用。为了解决这个突出的矛盾，经过一段时间的探索，终于在Windows上实现了一键安装部署声笔系列码。从此，小狼毫声笔专版的安装就变得与安卓上同文声笔专版的安装一样方便了。 把您下载的压缩包解压，在解压后的文件夹中找到小狼毫安装程序如Weasel4sbxlm-0.14.3.0，名称中的版本号可能发生变化；以管理员的身份执行该安装程序。如果以前安装过小狼毫，那么安装程序会提示您在安装时将卸载以前程序，按确定即可。安装完成后，您就可以打开各种应用程序，用声笔系列码输入汉字了。在输入的过程中，您还可以用F4或者Ctrl+~切换使用不同的方案。 如果以前安装过小狼毫，那么已有的Rime目录会备份在RimeBak目录中，以保留用户的数据。特别注意，如果已经存在RimeBak目录，则会被替代。]]></content>
  </entry>
  <entry>
    <title><![CDATA[两种截然不同的汉字输入场景]]></title>
    <url>%2F2020%2F01%2F08%2Fhzsrcj%2F</url>
    <content type="text"><![CDATA[汉字输入法有两种截然不同的应用场景，一种是大众应用，另一种是专业应用。所谓大众应用，是指一般的人使用汉字输入法来满足日常的工作和生活需要，比如写作、聊天等。所谓专业应用，是指打字员、参与打字比赛的人等使用汉字输入法来快速录入汉字。 大众应用大众应用时，输入的文本类型是有限或者非常有限的。聊天是最常见的汉字输入大众应用场景。每个人所聊的话题都是有限的，使用的单字和词组数量多不大，而且行文要求比较随意，不太注意语法和用词，网络流行词汇用得很频繁。公文和论文写作是另一种常见的汉字输入大众应用。每个人的工作和研究都局限于一定的领域，因而所用的字、词也相对固定和有限。用专业的话来说就是，这类文本的信息熵小，冗余度大，有很大的压缩余地。另外，大众用户很少会专门花费大量的时间来学习输入法。 现代的汉语拼音输入法很好地适应了这种情况，所以成为了现代汉字输入的绝对主流。一方面，现在大多数人都有比较好的拼音基础，因为汉语拼音是小学的必学内容。另一方面，拼音输入法可以通过简拼和混拼来压缩编码，从而在一定彻底上弥补全拼输入时码长过长而带来的效率底下问题。拼音输入还提供了方便的组词功能，可以不断的在输入过程中增加新的词汇，从而进一步压缩编码，缩短码长，提高效率。巨型的云词库则减轻了人们组词的负担。 声笔系列码中的声笔拼音和声笔简码都是面向大众应用的汉字输入法，但是在难度和效率上有所不同，为用户提供了更多的选择。声笔拼音和一般的拼音输入法最接近，只是增加了用v来作为以a e o开始的音节的零声母，克服了音节切分上的歧义。声笔简码则是一种简单、快捷的字词型输入法，对于一般的连续文本，其字均码长比五笔字型还短得多，具有最高的投入产出比，是绝大多数人进行汉字输入的最佳选择。 专业应用专业应用时，输入的文本类型是很广泛的。专业打字员曾经是专业应用的主力，而五笔字型则是专业打字的主流。文本类型繁多（打字员不知道自己会遇到什么样的文本）、照稿打字（只看需要录入的原稿）、时间紧迫（有规定的交稿时间）是专业应用的显著特征，所以对盲打的要求比较高，否则在看稿和看屏幕之间来回移动头部是很累的，而且低效，容易出错。 五笔字型重码率比较低，字、词的输入码固定，而且通常是静态的、不变的，经过强化训练以后就可以形成条件反射，从而基本上实现盲打，所以很适合专业应用场景。曾几何时，在祖国的大江南北，遍地都是打字店和五笔打字培训班，几乎每个有点规模的单位都有专职打字员。但是，随着计算机和智能手机及其应用的普及，打字成为每个人必备的基本技能。汉字输入都是由作者自己来完成的了，输入的模式也都是想打而不是照稿打字，没有盲打的必要。专业打字员，作为一个职业，已经几乎失去了意义。于是，打字店消失了，单位上也没有打字员了，五笔字型的用户数也快速萎缩，新生代很少有再学习五笔字型的了，因为投入与产出太不成比例。 喜欢参加打字比赛的打字爱好者是专业应用的另一股力量，当然学成以后可以不仅仅用于打字比赛。这些人比以前的专业打字员更追求极致的打字速度，但不一定是盲打的速度，因为打赛文是看着屏幕打字的，可以方便地看提示行。现在有很多能够满足这种专业应用的输入法，除了五笔字型、二笔和双拼等传统输入法外，另一类迅速崛起的输入法是顶功输入法。顶功输入法通过特殊的编码可以省略大量的空格键，从而大大地缩短码长，提高输入效率。 声笔系列码是顶功输入法的开创者，其中的声笔快码和声笔飞码都是面向专业应用的。它们不但具有较低的重码率，而且还比五笔字型简单、高效。对“音”敏感的用户可以选择声笔快码，而对“形”敏感的用户可以选择声笔飞码。而且，如果从声笔简码升级到声笔快码或者声笔飞码的话，学习成本会大大地降低，因为它们是建立在声笔简码基础之上的。]]></content>
      <tags>
        <tag>汉字</tag>
        <tag>输入</tag>
        <tag>场景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔简码RIME版重大升级]]></title>
    <url>%2F2019%2F12%2F25%2Fsbjmzdsj%2F</url>
    <content type="text"><![CDATA[声笔简码的RIME版，相比原生程序而言，在功能上一直存在严重的不足，不能自动调整码长，不能使用扩展编码。而原生程序又只能在Windows上运行，而不能用于安卓手机、苹果手机和MAC电脑等。这一对矛盾长期烦扰着声笔简码用户。 通过不懈的努力，对RIME进行不断地改进，现在的RIME版声笔简码已经实现了完美的自动码长和扩展编码，使用体验大大增强，可谓取得了重大突破。至今，除了不能精准造词和自动淘汰废词而外，RIME版声笔简码已经完全实现了声笔简码的专利特性。RIME版声笔简码在输入过程中需要经常翻页的历史一去不复返了！ 另外，这次升级还对声笔系列码收录的20万词组进行了进一步的优化，删除了3万多北语和搜狗词频均为-1的词组，剩下了比较精准的16万4千词组，包括声笔简码在内的全系列输入法均加以采用。]]></content>
      <tags>
        <tag>声笔简码</tag>
        <tag>升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码9.0开发计划与开发实录]]></title>
    <url>%2F2019%2F11%2F21%2Fsbxlm9-0%2F</url>
    <content type="text"><![CDATA[写在前头自从今年7月中旬首次发布声笔系列码的小狼毫定制程序以来，声笔系列码经历了多次快速地迭代。它的功能不断增强，体系几经变化。方案从少到多，从单一的声笔简码到包含声笔拼音、声笔智能、声笔飞码、声笔快码、声笔双拼、声笔星二共七款二十多型输入法的庞大体系，再到目前精减后的声笔拼音、声笔智能、声笔简码、声笔快码、声笔飞码共五款九型输入法。 声笔系列码的发展，版本从8.0到现在的8.5，已经逐渐地成熟起来，而且吸引了一些用户在使用。为了进一步完善声笔系列码，增加开发工作的透明度，便于阶段性成果内测工作的开展，有必要对下一步的开发工作有个计划，同时对开发过程做一个记录。 开发计划声笔系列码9.0版的开发工作，计划分以下两步来完成。 1 进一步缩短快码和飞码的字均码长，提高输入效率；快码和飞码的W型用S型来取代，以增加各型之间的共性，共享sb字的二码顶和sbb二字词的三码顶，共享s1b1b2b2格式的二字词，以便用户切换使用同款而不同型的方案。但是，这样一来，二字词就出现了两种编码格式，又遇到RIME平台的瓶颈。所以，第一步只能部分使用自动造词功能，sb字都不能参与造词。各型飞码和快码的编码格式如下，其中z表示飞码的部首或者快码的韵母，^表示起始顶屏码位。 X型的编码格式：单字 sb, szb^b；二字词 s1b1b2^b2, szsz；三字词 sssz；多字词 ssss K型的编码格式：单字 sb, szb^b；二字词 s1b1b2^b2, szs^b；三字词 sss^b；多字词 sss^S S型的编码格式：单字 sb, sz^bb；二字词 s1b1b2^b2, szSz；三字词 ssSz；多字词 ssSs 2 修改RIME源代码，以便让sb字也参与自动造词；这项工作是比较艰巨的，可能要花费不少的时间和精力。 3 经过短时间的试用，发现在采用了sf型简词以后，已经没有必要保留X K S三型了，于是以X型为基础，将其多字词的编码格式加以改进，统一为单一的飞码和快码，不再分型了，其格式如下： 单字 sb, szb^b；二字词 s1b1b2^b2, szsz；三字词 sssz；多字词 sssS 开发实录开发工作从11月18日起，截止11月20日为止，已经完成了飞码的第一步工作。在声笔系列码9.0版的字词型输入法中，都不再设三码非强制性简码词，以减少人机交互，加快操作速度，这是总结输入实践经验后得出的结论。另外，将拼音反查的方法改为了以a引导，使得操作更加方便；删除了供声笔快码和声笔飞码用的声笔反查功能；将声笔智能的词组数量也统一为20万，和其它方案完全一样。 第二项工作的进度比预想的要快得多，截至11月23已经基本上解决了算法上的问题。但是，在如何判断当前使用的方案时遇到了棘手的问题。截止11月26日，解决了所有程序难题。另外，增加了s_b和sf简词及其滤镜提示。在词库中交换了“并不”和“叭叭”两词的北语频度。而手机上，皮肤改为支持31键，同时设Tab和Return来解决翻页问题。电脑上也改为采用这种方式翻页，以便两者的用法统一起来。这样，标点符号就可以随时顶屏了。 到29日为止已经完成了三步开发计划，进入全面测试和文档修改阶段了。截止12月5日改为多字词第四码不用大写；声笔简码也支持sf简词；声笔拼音和声笔智能增加单字笔画过滤。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>开发</tag>
        <tag>计划</tag>
        <tag>实录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码体系重大修改]]></title>
    <url>%2F2019%2F11%2F17%2Fsbxmtxxg%2F</url>
    <content type="text"><![CDATA[声笔双拼和声笔星二在声笔系列码的体系中定位不是很清楚，当初设计它们的目的也仅仅是为了说明声笔简码的技术还可以用来改造其它输入法，使它们也可以使用字母选重等，从而变得更加好用和高效。 它们在易学性上不如声笔拼音、声笔智能和声笔简拼，而在效率上又不如声笔快码和声笔飞码，处于比较尴尬的境地，而且似乎并不太受到用户的青睐，我本人对它们也不是很熟悉。 但是每一款输入法都需要花费大量的精力来维护和优化，随着定制功能的增多和词库的增大，我越来越感觉到力不从心了。 所以，现在决定放弃声笔双拼和声笔星二的维护，把它们从声笔系列码中去除，以便专心致志地改进声笔拼音、声笔智能、声笔简码、声笔快码和声笔飞码这五款从简单到复制，从低效到高效的体系严密、特色鲜明的输入法。 另外，在新的体系中，也放弃了声笔快码S和声笔飞码S，因为它的三字词和四字词在不同的位置使用了大写字母，而且二字词的编码空间也很小，重码太多，对高效型的输入法是不适合的。同时，它主单的定位也已经被更好的声笔快码W和声笔飞码W取代了。 最后，声笔智能的词库也从150万词缩小为统一的20万词，与其它方案一样。 这样一来，安装程序包也大大地缩小，更方便用户下载使用。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>体系</tag>
        <tag>修改</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码RIME定制程序最新优化]]></title>
    <url>%2F2019%2F11%2F08%2Fupdate191108%2F</url>
    <content type="text"><![CDATA[为声笔系列码定制图标RIME默认的图标不能体现出声笔系列码定制程序的特点，一些网友提议把定制程序的图标改一下。我之前设计了一个声笔系列码的图标，目前在官网上使用。此次更新就把这个图标用上了。它形似一颗钻石，由几根简单的线条组成。 但是，这些线条体现了声笔系列码的共同特点：五个笔画和零声母的表示方法，如下标注上字母，含义就更清楚了。 从上到下按笔画顺序横竖撇捺折（分别用EIUOA表示）写出来就可以形成这个图标，其中最后的折笔同时代表了零声母V。记住了这幅图，你就掌握了声笔系列码的核心知识，同时也就基本上会使用声笔系列码中的声笔拼音、声笔智能和声笔简码三款输入法了。加上双拼韵母，你就可以掌握声笔快码和声笔双拼；加上部首，你就可以掌握声笔飞码；加上星空二笔的笔对和字根，你就可以掌握声笔星二。 该图标在Android上的效果如下： 在Windows 10上的效果如下： 优化翻页键的顶屏功能在声笔系列码中，默认用逗号和句号来作向前和向后的翻页键。但是，逗号和句号本身在中文里也使用得很频繁，如果不能顶屏的话，损失是很大的。在之前的定制程序里，实现了当没有重码时，仍然可以用逗号和句号顶屏的功能，算是一个进步。本次升级则进行了进一步的优化：当重码数小于6时都可以用逗号和句号顶屏。这样，对于重码少的输入法如飞码等，能顶屏的概率就大大增加了。 修改飞码X和快码X的简码二字词发现飞码X和快码X中遗漏了很多sbb型的简码二字词，造成无法输入后续的编码，这次更新已经补上了，去除了这个BUG。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>优化</tag>
        <tag>定制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码体系修改]]></title>
    <url>%2F2019%2F10%2F17%2Fsbxlmxg%2F</url>
    <content type="text"><![CDATA[整句方案调整将简码整句1更名为声笔智能，并取消其它所有整句类型，包括简码整句2、飞码整句、快码整句、声双整句和声二整句，因为它们与声笔智能的简单、高效相比，已经失去了存在的意义。这么做的目的是突显声笔智能输入法的地位，同时也表明它的本质特征不是整句，而是智能。 虽然声笔智能是基于声笔码和声笔简码的，但是与它们又有较大的区别，因为它没有利用顶功技术，而是充分利用了声笔编码的弹性特点，同时融合了现代拼音输入法的智能技术，产生了非常奇特的效果。这种奇特的效果是，比拼音智能输入法更加灵活，而且还更加简单、快捷。如果能够像搜狗拼音那样利用云端的大数据的话，那么就会如虎添翼。 声笔智能还可以选择采用语句流的方式，以便利用aeiou来执行搜索、查询词典、翻译等操作，具有很大的发展利用和空间，将大大地优于现在的各种拼音输入法。 增加声笔拼音声笔拼音和其它拼音输入法非常类似，主要的差异是以a e o开始的零声母音节的声母用v来代表。这样，在一串拼音中基本上可以完全确定音节的界线，从而可以提高拼音汉字转换的准确性。另外，由于所有的音节都不以a e i o u开头了，所以可以不加切换地用它们来进行笔画反查，这时a e i o u分别表示折 横 竖 捺 撇五种笔画。 声笔拼音还被声笔系列码的所有其它方案用来进行拼音反查，所以一定要知道它的用法，否则在拼音反查时会遇到困难。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>体系</tag>
        <tag>修改</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔简码扩展编码优化]]></title>
    <url>%2F2019%2F10%2F03%2Fjmkzmsyh%2F</url>
    <content type="text"><![CDATA[问题在用声笔简码输入单字和二字词时，常常会有很多重码，初学者往往通过翻页来查找需要的字词。他们对声笔简码不熟悉，键速很慢，翻页和查找所占的时间比例不大，不会感到什么不方便。当用户对声笔简码逐步熟悉后，就会觉得翻页和查找占的时间比例越来越大，而宁可使用扩展编码。 然而，此前的声笔简码使用扩展编码时，仅仅显示那些在第四码时第一页没有显示的字词。所以，必须先确定四码时候选窗口中确实没有想要的字词，再使用扩展编码。当候选项比较多时，眼睛的频繁扫视仍然是很费时间和精力的。 措施对于熟手来说，只需要看编码窗口中的一项就行了。如果该项不是想要的字词，就直接追加两个笔画，基本上就没有重码选择的顾虑了。如果是嵌入显示的，用户只需要看插入光标处的内容即可。 本次的优化做到了在使用扩展编码进行重码过滤时，仅仅排除了第四码时显示的第一项，所以用户只需要判断这第一项是否是所需要的就行了，从而可以大大地加快用户的操作速度。]]></content>
      <tags>
        <tag>声笔简码</tag>
        <tag>优化</tag>
        <tag>扩展编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为各款输入法增加整句模式]]></title>
    <url>%2F2019%2F09%2F19%2FSentenceModes%2F</url>
    <content type="text"><![CDATA[现代主流的拼音输入法都采用整句模式，其特点是，没有复杂的编码规则，输入方式灵活多变，因而学习门坎非常低。当然，所谓的整句是指可以按整句来输入，不是说只能输入整句，以字词为单位输入也是可以的，不过使用空格来上屏的情况就很多了。按字词输入，用空格上屏对全拼来说是很自然的，但是对双拼来说就显得笨拙。 全拼整句可兼容简拼和混拼，可以设置模糊音。但是，音节的准确切分是一个比较大的问题。另一个更大的问题是用户可能养成不良的输入习惯。比如，有的用户只知道采用单字加联想来进行输入；有的用户输入二字词时习惯用一、二字的声母，然后就进行分页选重操作。殊不知，这些简单易用的操作方式，在进行大量的文本输入的时候，效率是非常低下的。并且，一旦形成习惯，就很难纠正，同时也没有人提醒他们那是低效的方式，他们的自我感觉还很好，因为他们根本就不知道还有更好的方式。考虑到输入法使用的频繁程度，这类用户在输入方面的时间浪费是惊人的。 双拼整句，可以比较自由地自定义声母和韵的组合方式，一方面可以缩短码长，另一方面可以改善手感。同时，也可以增加形码辅助或笔画筛选，从而减少重码。双拼整句也有自己的问题。首先，需要记忆双拼的翘舌声母、零声母和韵母的表示方法；如果采用形辅，则还要记忆形辅的编码。其次，不加形辅的话，重码很多，而加了形辅又会造成字码切分问题。 顶功编码做成整句输入法，即使随时添加任意个笔画辅助码都可以完全避免字码切分岐义。如果正常输入按照一字两键的方式，那么飞码和快码的126个两键字是完全确定的，可以在很大的程度上提高整句输入的准确性。简码可以构造两型整句方案，一型可以任意输入1至4码，另一型确定一、二简字，正常输入三码，必要时可用四码。声笔双拼和声笔星二可以确定一简字，正常按照一字两键输入，可以用1至2笔画进行辅助去重，也比一般的两码连打方案效果要好。 所以，声笔系列码现在增加了飞码整句、快码整句、简码整句1型、简码整句2型、声双整句和声二整句。 2019年9月24日，通过修改RIME程序实现了整句模式下的字母选重。所以，整句方案也做了一些调整，以便充分利用这个新的特性。简码整句的单字编码均改为sbb，1型可以任意输入1至3码，2型确定一简字和二简字，其它字用三码输入；两型简码整句都在三码时用aeiou来进行字母选重。其它非简码的整句输入方案，均采用两码一字的简便方法；有重码时，不再追加笔画辅助，而是直接利用aeiou来选择重码。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>整句模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞码和快码新增W型]]></title>
    <url>%2F2019%2F09%2F18%2FAddModeW%2F</url>
    <content type="text"><![CDATA[现有飞码S和快码S都是主单的输入法，在输入二字词和三字词时，重码很多，常常会有翻页操作，影响了用户的体验。在没有实现动态码长的情况下，是没有办法解决这个问题的。另一个问题是，有的用户不喜欢S型用大写字母参与编码。 群友尛羴提议将二字词的编码改为sbbsz五码，促发了我设计W型的飞码和快码。飞码W的编码格式具体如下。 单字：sb, spbbbx，两码起顶，含105个sb字二字词：s1b2b2s2z2x，不收录用单字可以在五码及以内输入的二字词三字词：s1b2b2s3z3x多字词：s1b2b2s3s0x 其中，z表示p或者b，0表示末字。快码W的编码格式与飞码W完全相同，只需将部首p换为韵母y就行了。 因为无论单字还是词组都是采用五码，所以用“五”的拼音首字母来命名此型输入法。它支持自动造词和字词重码的调频，有重码的时候，用aeiou进行字母选重。]]></content>
      <tags>
        <tag>飞码</tag>
        <tag>快码</tag>
        <tag>W型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码全面升级到8.5版]]></title>
    <url>%2F2019%2F09%2F10%2Fupgrade8-5%2F</url>
    <content type="text"><![CDATA[在声笔系列码定制版RIME支持字母选重后，现在完成了对声笔系列码的全面升级，并将版本号统一确定为8.5。这次升级的要点总结如下。 增加输入法的类型声笔飞码和声笔快码进一步细分为X、K和S三型。X型的以词组为主，单字三码起顶；K型的以字均码长短为特点，sb单字二码起顶，其它单字三码起顶；S型以单字为主，辅以词组，单字均二码起顶。X型和S型均支持自动造词和动态调频，而K型不支持自动造词，但仍支持动态调频。从易学性来讲，X型是最简单的，其次是S型的，最难的是K型。K型是用于竞速的，需要记住词组的级别才能实现高速盲打。日常使用的话，词组派的可能认为X型更舒服些，而单字派可能觉得S型更舒服些。当然，最好是能根据使用场景，切换使用三种类型的飞码，以充分利用它们各自的优势。 改变两个单字简码在声笔系列码中，一简字“m们”和二简字“mu么”几乎没有组词能力，不利于提高词组的离散性能，所以将它们改为了“m没”和“m名”，并将其它相关字的编码进行了调整。同时，将所有输入法的词组重新生成。对于声笔星二，则恢复其原来的单字编码方法，它的m上原来就是放的“没”字。 词库增加到20万此前的声笔系列码词库是基于微软拼音、现代汉语词典、新华字典和成语词典，并采用了北语词频。结果，在约14万词中，只有约5万匹配上的频度，剩余的词组被赋与了-1的频度。虽然，北语词频做得很科学，有分类词频，也有综合词频。但是，北语词频比较陈旧，不能很好都反应词频的变化情况。另外，使用的以上词典数据年代比较久远，很多新的词汇都缺乏。 为了解决以上问题，我结合使用了相对较新的（2012年的）搜狗词频数据。搜狗词频大于0的约有15万条词组，与原来的声笔系列码词组合并去重后，得到约20万词组。这些词组的具体情况为：二字词90330条，多字词110273条，共计200603条。将这些词组按北语词频和搜狗词频联合排序，并以北语词频为优先，在北语词频相同时再以搜狗词频排序。在最终码表中用的是搜狗词频，表现出的效果是：简码按联合频率设置，重码按搜狗频率排序。 声笔系列码各款输入法的具体收词情况，请移步声笔系列码的词库优化实验。 升级声笔简码原生程序修改声笔简码原生程序，与RIME程序同步反映一简字“们”和二简字“么”的变化，词库增大到20万，版本号改为8.5。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[声笔系列码的词库优化实验]]></title>
    <url>%2F2019%2F08%2F29%2Fcikuyh%2F</url>
    <content type="text"><![CDATA[面临的问题此前的声笔系列码词库是基于微软拼音、现代汉语词典、新华字典和成语词典，并采用了北语词频。结果，在约14万词中，只有约5万匹配上的频度，剩余的词组被赋与了-1的频度。虽然，北语词频做得很科学，有分类词频，也有综合词频。但是，北语词频比较陈旧，不能很好都反应词频的变化情况。另外，使用的以上词典数据年代比较久远，很多新的词汇都缺乏。 解决的方案为了解决以上问题，我又结合了相对较新的（2012年的）搜狗词频数据。搜狗词频大于0的约有15万条词组，与原来的声笔系列码词组合并去重后，得到约20万词组。这些词组的具体情况为：二字词90330条，多字词110273条，共计200603条。将这些词组按北语词频和搜狗词频联合排序，并以北语词频为优先，在北语词频相同时再以搜狗词频排序。在最终码表中用的是搜狗词频，表现出的效果是：简码按联合频率设置，重码按搜狗频率排序。 具体的实施声笔简码首先将这20万词组用于声笔简码，四码重码数限制在29以内，即5页以内，并留最后一个空码位以便加快造词过程。按联合词频的顺序舍弃词频最低的词组后得到二字词78098条，多字词110210条，共计188308条。为什么要对重码数进行限制呢？这是因为翻页过多会严重影响键速，而且RIME的在线造词产生的词组都是放在最后的，选择起来非常麻烦。 声笔飞码X声笔飞码X的词组没有截断简码，只有半有理的简码。它的词组编码与传统四码输入法类似，所以具有很大的四码空间，只需把重码数限制在11以内就行了。按搜狗词频舍弃低频词后，得到199923条词组。另外，在sbb空间安排与飞码K相同的525个三键高频二字词，并在此之外利用syb空闲空间安排69个高频二字词。最后，在sbs空间上放置1840个非强制的二字词，在sss空间上放置8100个非强制的三字词。 声笔飞码K声笔飞码K的词组采用分级收录的方法，不收录用单字输入时效率更高的词组，最长码为5，没有作重码数的限制，收二字词40082条。三字词和四字词不分级，分别收录45276条和64953条。另外，利用spb空闲空间安排69高频二字词。由于sb字开始的二字词按s1b1b2的规则只有523个，有两个空码位fei和qia，所以在它们上面分别安放“否则”和“曲线”两个不规则词，以充分利用空间。 声笔飞码S声笔飞码S在收录词组时，把重码数限制在11以内，收词151036条，包括二字词46287条，三字词39798条，多字词64951条。另外，利用spb空闲空间安排69高频二字词。 声笔快码X声笔快码X的词组没有截断简码，只有半有理的简码。它的词组编码与传统四码输入法类似，所以具有很大的四码空间，只需把重码数限制在11以内就行了。按搜狗词频舍弃低频词后，得到197459条词组。另外，在sbb空间安排与飞码K相同的525个三键高频二字词，并在此之外利用sy和syb空闲空间分别安排95个和589个高频二字词。最后，在sbs空间上放置1840个非强制的二字词，在sss空闲空间上放置8100个非强制的三字词。 声笔快码K声笔快码K的词组采用分级收录的方法，不收录用单字输入时效率更高的词组，最长码为5，没有作重码数的限制，收二字词77909条。三字词和四字词不分级，分别收录45243条和57734条。在sbb空间安排与飞码K相同的525个三键高频二字词，并在此之外利用sy和syb空闲空间分别安排95个和589个高频二字词。 声笔快码S声笔快码S在收录词组时，把重码数限制在11以内，收词152420条，包括二字词47671条，三字词39798条，多字词64951条。另外，利用sy和syb空闲空间分别安排95个和589个高频二字词。 声笔双拼声笔双拼是对传统自然码双拼的改造，它收四码词197456条，并利用sy和syb空闲空间安排了各166和963个高频二字词。最后，在sbs空间上放置XXXX个非强制的二字词，在sss空闲空间上放置8105个非强制的三字词。 声笔星二声笔星二的词组是对星二的改造，它收四码词组198797条，把重码数限制在11以内，并利用sd和sdb空闲空间安排了各62和517个高频二字词。最后，在sbs空间上放置1848个非强制的二字词，在sss空闲空间上放置8097个非强制的三字词。]]></content>
      <tags>
        <tag>声笔系列码</tag>
        <tag>词库</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞码（X）和快码（X）的优化实验]]></title>
    <url>%2F2019%2F08%2F15%2Ffmkmyh%2F</url>
    <content type="text"><![CDATA[存在的问题在8.00的飞码（X）和快码（X）中，sbb和sbbb只是简单地放了声笔字，实际上几乎没投入使用，非常浪费。特别是在新增的飞码X和快码X中，因为没有sbbs型的二字词，sbb是只需要三键的短码空间，不好好利用的话，实在可惜。同时，飞码（X）中有少量spb短码空间是空闲的，而在快码（X）中存在着不少的sy和大量的syb短码空闲空间。 RIME版飞码（X）和快码（X）面临的另一个问题是，105个sb型简码字没有原生版那样的提示，初学者必须死记。 短码空间的利用飞码（X）首先，利用spb空闲空间。从声笔简码的二字词中抽出高频的填入该空间，脚本如下。 1234567select zici = rtrim(zici), bianma = left(bianma,3), chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 3 and left(bianma,3) not in (select bianma = left(a.bianma,3)from spdanz aright join sbjerz b on left(a.bianma,3) = left(b.bianma,3)where a.changdu = 3 and b.changdu = 3)order by chupin desc 一共抽取了67个ssb型的二字词，罗列其中的前10条如下。 12345678910那个 ngu 169294儿子 vza 61768任务 rwu 57310不好 bha 54085放心 fxo 46543若是 rsi 39942空中 kzi 25849吩咐 ffi 25347内心 nxo 25231暗中 vzi 23181 其次，利用sbb空间。对于飞码和飞码X，利用的方式是不一样的。 对于飞码，在sbb上安排非强制性二字词简码，其取码规则为s1b1b1，SQL脚本如下。 123456789select text=rtrim(zici), code=left(bianma,3)from spcizwhere xuhao in (select xuhao from (select bianma=left(bianma,3), xuhao=min(xuhao) from spcizwhere len(rtrim(zici)) = 2group by left(bianma,3)) tmp) 一共抽取了451个二字词，罗列其中的前10条如下。 12345678910告诉 gue声音 sei眼睛 yia一切 yee改革 gae朋友 pua研究 yeu代表 dui不禁 beu支持 zei 对于飞码X，在为sbb空间安排二字词时，不能包含已经为其抽取的spb型二字词，脚本如下。 12345678910111213141516select zici = rtrim(zici), bianma = left(bianma,1) + substring(bianma,3,2), chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere xuhao in (select xuhao from(select bianma = left(bianma,1) + substring(bianma,3,2), xuhao = min(xuhao) from sbjerzwhere rtrim(zici) not in (select zici from (select zici = rtrim(zici), bianma = left(bianma,3), chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 3 and left(bianma,3) not in (select bianma = left(a.bianma,3)from spdanz aright join sbjerz b on left(a.bianma,3) = left(b.bianma,3)where a.changdu = 3 and b.changdu = 3)) tmp)group by left(bianma,1) + substring(bianma,3,2)) tmp2) 一共抽取了525个s1b2b2型的二字词，罗列其中的前10条如下。 12345678910一个 yuo 997773没有 meu 826617我们 wui 812417他们 tui 791018什么 sua 742524自己 zae 741012知道 zou 574771可以 kao 432546这个 zuo 404217就是 jia 376685 快码（X）首先，利用sy空闲空间。从声笔简码的二字词中抽出高频的填入该空间，脚本如下。 123456select zici = rtrim(zici), bianma = left(bianma,2), chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 2 and left(bianma,2) not in (select bianma = left(a.bianma,2)from ybdanz aright join sbjerz b on left(a.bianma,2) = left(b.bianma,2)where a.changdu = 2 and b.changdu = 2) 一共抽取了95个ss型的二字词，罗列其中的前10条如下。 12345678910可以 ky 432546已经 yj 325164发展 fz 323016问题 wt 279209一定 yd 201525可能 kn 185841今天 jt 173941觉得 jd 172314姑娘 gn 168226一些 yx 165456 第二，利用syb空闲空间。从声笔简码的二字词中抽出高频的填入该空间，脚本如下。 1234567select zici = rtrim(zici), bianma = left(bianma,3), chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 3 and left(bianma,3) not in (select bianma = left(a.bianma,3)from ybdanz aright join sbjerz b on left(a.bianma,3) = left(b.bianma,3)where a.changdu = 3 and b.changdu = 3)order by chupin desc 一共抽取了587个ssb型的二字词，罗列其中的前10条如下。 12345678910一个 ygu 997773我们 wmu 812417起来 qle 330495还有 hye 191450一点 ydi 189033而且 vqi 176585一下 yxe 167905之间 zjo 139129下来 xle 134533眼睛 yji 133992 第三，利用sbb空间。对于快码和快码X，利用的方式是不一样的。 对于快码，在sbb上安排非强制性二字词简码，其取码规则为s1b1b1，SQL脚本如下。 123456789select text=rtrim(zici), code=left(bianma,3)from ybcizwhere xuhao in (select xuhao from (select bianma=left(bianma,3), xuhao=min(xuhao) from ybcizwhere len(rtrim(zici)) = 2group by left(bianma,3)) tmp) 一共抽取了454个二字词，罗列其中的前10条如下。 12345678910经济 jaa社会 soa世界 sei市场 soe开始 kee技术 jei希望 xuo表示 bee改革 gae国际 gia 对于快码X，在为sbb空间安排二字词时，不能包含已经为其抽取的sy和syb型二字词，脚本如下。 123456789101112131415161718192021222324select zici = rtrim(zici), bianma = left(bianma,1) + substring(bianma,3,2),chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere xuhao in (select xuhao from(select bianma = left(bianma,1) + substring(bianma,3,2), xuhao = min(xuhao) from sbjerzwhere rtrim(zici) not in (select zici from (select zici = rtrim(zici), bianma = left(bianma,2),chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 2 and left(bianma,2) not in (select bianma = left(a.bianma,2)from ybdanz aright join sbjerz b on left(a.bianma,2) = left(b.bianma,2)where a.changdu = 2 and b.changdu = 2)unionselect zici = rtrim(zici), bianma = left(bianma,3),chupin = case chupin when -1 then 0 else chupin end from sbjerzwhere changdu = 3 and left(bianma,3) not in (select bianma = left(a.bianma,3)from ybdanz aright join sbjerz b on left(a.bianma,3) = left(b.bianma,3)where a.changdu = 3 and b.changdu = 3)) tmp)group by left(bianma,1) + substring(bianma,3,2)) tmp2) 一共抽取了525个s1b2b2型的二字词，罗列其中的前10条如下。 12345678910没有 meu 826617他们 tui 791018什么 sua 742524自己 zae 741012知道 zou 574771这个 zuo 404217就是 jia 376685中国 zia 336314这样 zei 328523因为 you 317518 公共无论是飞码（X）还是快码（X），都还要利用sbbbx空间。将sbbb空间用于声笔单字输入，只有1、2级强制简码，重码字用aeiou来选择。声笔单字供用户在不知道偏旁部首或韵母时使用。‸ 对于非X型的，脚本如下： 123456789select zici = rtrim(zici), bianma = left(bianma,changdu),chupin, stem = left(bianma,4) + upper(left(bianma,1))from sbdanz where changdu &lt;= 2unionselect zici = rtrim(zici), bianma = left(bianma,4),chupin = case chupin when -1 then 0 else chupin end,stem = left(bianma,4) + upper(left(bianma,1))from sbdanz where changdu &gt; 2order by chupin desc 对于X型的，由于正码的单字码表中已经包含了1、2级简码，并且不再需要构词码，所以脚本如下： 123select zici = rtrim(zici), bianma = left(bianma,4),chupin = case chupin when -1 then 0 else chupin endfrom sbdanz where changdu &gt; 2 105个sb简码字的提示制作一个滤镜供飞码（X）和快码（X）使用，包括sb105.txt和sb105.json，放在Rime的OpenCC子文件夹中。 sb105.txt的内容如下： 123456789101112131415161718192021不 &amp;nbsp边a&amp;nbsp把e&amp;nbsp别i&amp;nbsp部o&amp;nbsp白u&amp;nbsp出 &amp;nbsp除a&amp;nbsp成e&amp;nbsp此i&amp;nbsp次o&amp;nbsp从u&amp;nbsp的 &amp;nbsp对a&amp;nbsp大e&amp;nbsp当i&amp;nbsp道o&amp;nbsp得u&amp;nbsp发 &amp;nbsp飞a&amp;nbsp夫e&amp;nbsp非i&amp;nbsp方o&amp;nbsp分u&amp;nbsp个 &amp;nbsp给a&amp;nbsp过e&amp;nbsp国i&amp;nbsp高o&amp;nbsp公u&amp;nbsp和 &amp;nbsp好a&amp;nbsp还e&amp;nbsp回i&amp;nbsp话o&amp;nbsp会u&amp;nbsp就 &amp;nbsp经a&amp;nbsp进e&amp;nbsp见i&amp;nbsp家o&amp;nbsp几u&amp;nbsp可 &amp;nbsp孔a&amp;nbsp开e&amp;nbsp口i&amp;nbsp快o&amp;nbsp看u&amp;nbsp了 &amp;nbsp力a&amp;nbsp来e&amp;nbsp里i&amp;nbsp立o&amp;nbsp利u&amp;nbsp们 &amp;nbsp民a&amp;nbsp面e&amp;nbsp明i&amp;nbsp没o&amp;nbsp么u&amp;nbsp你 &amp;nbsp那a&amp;nbsp南e&amp;nbsp内i&amp;nbsp农o&amp;nbsp年u&amp;nbsp平 &amp;nbsp皮a&amp;nbsp破e&amp;nbsp品i&amp;nbsp怕o&amp;nbsp片u&amp;nbsp去 &amp;nbsp强a&amp;nbsp起e&amp;nbsp且i&amp;nbsp前o&amp;nbsp全u&amp;nbsp人 &amp;nbsp如a&amp;nbsp若e&amp;nbsp日i&amp;nbsp让o&amp;nbsp然u&amp;nbsp是 &amp;nbsp双a&amp;nbsp事e&amp;nbsp上i&amp;nbsp说o&amp;nbsp手u&amp;nbsp他 &amp;nbsp她a&amp;nbsp天e&amp;nbsp同i&amp;nbsp头o&amp;nbsp体u&amp;nbsp而 &amp;nbsp阿a&amp;nbsp二e&amp;nbsp暗i&amp;nbsp安o&amp;nbsp儿u&amp;nbsp我 &amp;nbsp维a&amp;nbsp无e&amp;nbsp晚i&amp;nbsp为o&amp;nbsp外u&amp;nbsp下 &amp;nbsp线a&amp;nbsp想e&amp;nbsp小i&amp;nbsp心o&amp;nbsp笑u&amp;nbsp一 &amp;nbsp也a&amp;nbsp有e&amp;nbsp眼i&amp;nbsp意o&amp;nbsp用u&amp;nbsp在 &amp;nbsp子a&amp;nbsp正e&amp;nbsp中i&amp;nbsp着o&amp;nbsp自u&amp;nbsp sb105.json的内容如下： 12345678910111213141516&#123; &quot;name&quot;: &quot;sb105&quot;, &quot;segmentation&quot;: &#123; &quot;type&quot;: &quot;mmseg&quot;, &quot;dict&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;file&quot;: &quot;sb105.txt&quot; &#125; &#125;, &quot;conversion_chain&quot;: [&#123; &quot;dict&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;file&quot;: &quot;sb105.txt&quot; &#125; &#125;]&#125; 另外，再创建为飞码、飞码X、快码和快码X分别创建一个配置文件：sbfm.custom.yaml, sbfmx.custom.yaml, sbkm.custom.yaml和sbkmx.custom.yaml，放在Rime文件夹中。这个几个文件的内容完全一样，如下所示。 12345678910111213141516patch: &quot;switches/@next&quot;: name: sb105 reset: 1 #初始状态,0关1开 &quot;engine/filters/@next&quot;: simplifier@sb105 sb105: opencc_config: sb105.json option_name: sb105 show_in_comment: true #开启编码滤镜 comment_format: #编码滤镜正则处理 - &quot;xform/&lt;br&gt;/\n/&quot; #编码滤镜内容换行 - &quot;xform/&amp;nbsp/ /&quot; #编码滤镜内容显示空格 tags: - abc tips: char #none无注释,char单字注释,all全部注释 完成以上步骤后，重新部署就可以生效。 在计算机上的声笔字提示效果如下： 在手机上的声笔字提示效果效果如下： 实验结果使用发现，开滤镜提示sb字后，导致一简字不能参与造词。还没有找到解决办法，只能暂时放弃滤镜。 结论保留码表优化结果，暂时放弃用滤镜提示声笔字的功能。]]></content>
      <tags>
        <tag>飞码</tag>
        <tag>快码</tag>
        <tag>优化</tag>
        <tag>飞码X</tag>
        <tag>快码X</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RIME版声笔双拼优化实验]]></title>
    <url>%2F2019%2F08%2F13%2Fsbspyh%2F</url>
    <content type="text"><![CDATA[利用单字的短码空闲空间由于现在的声笔双拼只考虑了规则编码，所以单字编码在码长为2和3时都有不少的短码空间是空闲的，非常浪费。利用这种空间的办法是，将声笔简码的ss和ssb型二字词插入到该空间中。这种词现在有1098个，频度最高的一些二字词及其编码和频度如下。 1234567891011121314151617181920一个 ygu 997773我们 wmu 812417什么 sm 742524起来 qle 330495因为 yw 317518现在 xz 315893怎么 zm 294900问题 wt 279209经济 jj 257865这么 zmu 225697这些 zx 225430一定 yd 201525如此 rci 194183一点 ydi 189033关系 gx 188400可能 kn 185841而且 vqi 176585心中 xzi 176312地方 df 173581姑娘 gn 168226 如果能充分使用上述简码二字词的话，对输入效率的提升是有帮助的，只是编码格式不一样，需要记忆。 另外，还有少量的sb和sbb型空间没有利用，如何利用？现在还没有考虑好。 利用词组的三码空闲空间目前，声笔双拼中，编码sss是空闲的。优化的措施是，把最常见的词组取前三码作为其简码放在sss空间中，同时也保留它们的全码。也就是说，这种简码不是强制性的。不过，如果用户利用了简码，并且如果四码上有重码词组的话，在选择重码后，重码的词组就可以提前，就会多产生一个四键词组，从而提高输入效率。这种简码词组共有一万多条，下面是一些例子。 12345678910111213141516171819202122没有 mzy 826617什么 sfm 742524自己 zij 741012知道 zid 574771可以 key 432546这个 zeg 404217中国 zsg 336314起来 qil 330495这样 zey 328523已经 yij 325164发展 faz 323016因为 ynw 317518现在 xmz 315893怎么 zfm 294900工作 gsz 287827问题 wft 279209经济 jyj 257865还是 hls 238983出来 cul 238047如果 rug 234912只是 zis 234730爱因斯坦 vys 233485 升级办法将新的sbsp.dict.yaml文件复制的用户文件夹覆盖原来的同名文件，然后将sbsp.userdb文件夹删除，再重新部署，就可以使用了。注意，删除sbsp.userdb文件夹后，你之前所造的词组和产生的调频信息就丢失了，只有重新再来一遍。因为码表有破坏性的变更，与用户数据不一致了，可能产生冲突，无法利用原有的用户数据，非常遗憾。]]></content>
  </entry>
  <entry>
    <title><![CDATA[声笔简码重磅发布]]></title>
    <url>%2F2019%2F08%2F04%2FReleaseSbjm%2F</url>
    <content type="text"><![CDATA[声笔简码已经通过了长期的准备、测试和优化，现在终于发布了！ 它是在声笔码和声笔飞码后，又一次输入法的创新，综合运用了很多独创的黑科技，包括连续字词混合顶屏、自动动态码长调整、精准自动造词、快捷字母选重、字词扩展编码、静态高频字词、字词编码分流、无切换码表反查等。 声笔简码也是对10多年顶功类输入法创新的综合运用，它将再一次对输入法的发展方向产生深远的影响。 更多详情，请移步声笔简码，或者直接下载原生程序或RIME程序。]]></content>
      <tags>
        <tag>声笔简码</tag>
        <tag>输入法</tag>
        <tag>顶功</tag>
        <tag>字母选重</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Rime的声笔系列码现在提供Android安装程序了]]></title>
    <url>%2F2019%2F07%2F23%2Frime4sbxlm%2F</url>
    <content type="text"><![CDATA[缘起在发布Weasel4sbxlm时，我就承诺过会尽快提供对Android的支持，现在就是兑现的时候了。由于增加了对Android的支持，所以名称也改为了Rime4sbxlm，意为基于Rime的声笔系列码。不过，此版程序实际上能兼容同版本号的官方小狼毫和同文，不会对已经安装的输入法方案产生影响。与官方程序的区别主要是，增加了对顶功输入法用小码集字母兼用于选择重码字词的支持。下载链接为：https://github.com/sbxlm/sbxlm.github.io/releases/download/20190723/Rime4sbxlm.rar Rime4sbxlm的主要内容 本Rime4sbxlm主要包括用于Windows和Android的安装程序，以及声笔飞码、声笔快码、声笔双拼和声笔星二码表和方案。 声笔飞码和声笔快码为二码起顶方案，强调单字的效率，同时支持sbbs二字词，但是不收录由三码及以内单字构成的二字词，这是因为这样才能充分利用狭小的二字词空间。另外，三码及以内的单字在熟练后击键率是很高的，也没有必要用二字词的方式来输入。本版飞码和快码还有一个重大改进，那就是三字词和多字词均可以用简拼的方式来输入（虽然要用一个大写字母），实现了二码顶与简拼的共存，这对输入成语等特别有帮助。 声笔双拼和声笔星二则是利用声笔技术分别对传统自然码和二笔输入法的改造，三级单字只用三键就可以输入，重码用aeiou来选择，而不是用笨拙的数字键。这样，它们不但变得更简单，而且效率还更高，操作还更容易。 安装方法在安装小狼毫和同文后，将公共部分和输入法部分的码表和方案复制到用户目录，重新部署并选择方案后就可以使用了。 下一步打算下一步会有一个重大的发布。声笔简码已经通过了长期的准备、测试和优化，也会在近期发布了。它将是在声笔码和声笔飞码后，又一次输入法的创新，综合运用了很多独创的黑科技，敬请期待。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>声笔系列码</tag>
        <tag>Rime</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[首个为声笔系列码定制的小狼毫输入法]]></title>
    <url>%2F2019%2F07%2F19%2Fweasel4sbxlm-0-14-3-0%2F</url>
    <content type="text"><![CDATA[热烈祝贺首个为声笔系列码定制的小狼毫输入法正式发布！顶功输入法现在虽然越来越火，但是现有的平台都有太多的局限性，无法让输入法玩家们玩出更多的花样。利用表示笔画的小码集字母aeiou进行选重是声笔系列码的黑科技之一，一直无法在RIME中实现。于是，我只得硬着头皮改了一下librime的源码，现在终于可以在小狼毫中使用了！当然，自动码长调整等其它声笔技术在RIME平台和其它输入法平台上仍然没有办法使用。不过，已经可以多一种玩法了。祝贺！祝贺！ 等不及了吗？赶快下载Weasel4Sbxlm吧。等一下！MacBook和Android怎么办了？少安毋躁，只有稍等一下了，后续再跟进。 本版输入法的主要内容公共部分 用于Windows的安装程序weasel4sbxlm-0.14.3.0.exe，增加了官方版没有字母选重的功能，仍然可以兼容官方版，不会影响已经有的输入法。 笔画码表（用于笔画反查码表）：bihua.dict.yaml和bihua.schema.yaml 拼音码表（用于拼音反查码表）：pinyin_simp.dict.yaml和pinyin_simp.schema.yaml 本文件：readme.txt 输入法部分这里的声笔飞码即原生程序中的飞码声形模式，而声笔快码则是声韵模式。以下编码格式中，s代表声母，p代表偏旁部首，b代表笔画，y代表韵母，d代表双笔，x代表选择键。 声笔飞码：sbfm.dict.yaml和sbfm.schema.yaml。它的编码格式：单字为spbbx, sbbbx；二字词为sbbsx；三字词为ssSx；多字词为sSssx。 声笔快码：sbkm.dict.yaml和sbkm.schema.yaml。它的编码格式与声笔飞码基本上相同，只需要把spbbx换为sybbx就行了。 声笔双拼：sbsp.dict.yaml和sbsp.schema.yaml。它的编码格式：单字为sybbx，二字词为sysyx，三字词为sssyx；多字词为ssssx。声笔双拼是基于自然码双拼改编的。 声笔星二：sbxv.dict.yaml和sbxv.schema.yaml。它的编码格式：单字为sdbbx，二字词为sdsdx，三字词为sssdx；多字词为ssssx。声笔星二是基于星空二笔改编的。 更多信息要知道更多的信息？请加入声笔系列码交流QQ群445906697。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>小狼毫</tag>
        <tag>声笔系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主流输入法]]></title>
    <url>%2F2019%2F07%2F17%2Fmain-imes%2F</url>
    <content type="text"><![CDATA[输入法排行榜百度经验最好用的中文输入法十大排名多特输入法排行榜华军输入法排行榜 搜狗输入法搜狗输入法官方网站搜狗输入法百度百科 百度输入法百度输入法官方网站百度输入法百度百科]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>主流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[业界要文]]></title>
    <url>%2F2019%2F07%2F17%2Fkey-articles%2F</url>
    <content type="text"><![CDATA[王小川的互联网江湖：从输入法到AI背后的故事“我是1978年生的人，到今年是40岁，也是改革开放的同龄人。挺感谢这样一个大的时代背景，让自己成为了互联网飞速发展的见证者、参与者，也是受益者。” 具体请看http://news.gmw.cn/xinxi/2019-05/24/content_32864391.htm 搜狗王小川：翻译主场景不是翻译机，而是输入法与搜索从来没指望翻译机为搜狗提供支柱性收入来源，更大意义在于更多地从语言交互上实现AI落地扩展。 具体请看https://www.yicai.com/news/100096100.html 搜狗劫持百度神马等流量构成不正当竞争，3000万罚款创海淀法院同类案件最高纪录6月27日，海淀法院对奇虎公司、百度公司，以及动景公司和神马公司因搜狗输入法通过搜索候选词为搜狗搜索导流量分别起诉搜狗公司等不正当竞争纠纷三案集中宣判。法院一审认定搜狗公司构成不正当竞争，应停止不正当竞争行为，分别为三案原告公开消除影响，向奇虎公司、百度公司各赔偿经济损失500万元等，向动景公司和神马公司共赔偿2000余万元，系海淀法院同类案件罚款最高纪录。 具体请看https://www.yicai.com/news/100241684.html]]></content>
      <tags>
        <tag>业界</tag>
        <tag>要文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何关闭Wow64重定向？]]></title>
    <url>%2F2019%2F07%2F12%2Fdisable-redirect%2F</url>
    <content type="text"><![CDATA[先参见https://blog.csdn.net/karlxzy/article/details/42170419 现在声笔系列输入法的安装要先判断Windows是32位的还是64位的，再通过不同的安装程序来安装，用起来不是很方便。通过关闭Wow64重定向，就可以用一个32位程序同时解决64位和32位Windows输入法的安装问题。]]></content>
      <tags>
        <tag>关闭</tag>
        <tag>Wow64</tag>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下如何判断应用程序是32位的还是64位的？]]></title>
    <url>%2F2019%2F07%2F12%2Fwin32or64%2F</url>
    <content type="text"><![CDATA[方法一：利用任务管理器任务管理器 -&gt; 进程：进程后带有*32的是32位应用程序，否则为64位应用程序。此法仅适用于运行中的应用程序。 方法二：利用简化颜色模式鼠标右击应用程序 -&gt; 属性 -&gt; 兼容性：若设置框中的降低色彩和分辨率的选项可勾选则32位应用程序，否则为64位应用程序。 方法三：查看EXE文件头二进制方式打开应用程序，在文件头中能找到PE..L的是32位的，能找到PE..d的是64位。 来源：改编自https://blog.csdn.net/dayday3923/article/details/78597453]]></content>
      <categories>
        <category>Windows</category>
        <category>应用程序</category>
      </categories>
      <tags>
        <tag>应用程序</tag>
        <tag>32位</tag>
        <tag>64位</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Git的一些技巧]]></title>
    <url>%2F2019%2F07%2F05%2Fgit-tips%2F</url>
    <content type="text"><![CDATA[使用子模块在Git官网上，有针对子模块的专门说明，详见Git Submodules。 添加子模块比如，添加一个子模块DbConnector： 1$ git submodule add https://github.com/chaconinc/DbConnector 克隆带子模块的仓库123$ git clone https://github.com/chaconinc/MainProject$ git submodule init$ git submodule update 以上三个命令也可以用下面引命令代替： 1$ git clone --recursive git clone https://github.com/chaconinc/MainProject 删除子模块采用以下三个步骤：详见Stack Overflow。 123$ git submodule deinit -f -- a/submodule$ rm -rf .git/modules/a/submodule$ git rm -f a/submodule 使用多个账号如何在同一台计算机上使用多个Github账号？要点如下，详细方法见Stack Overflow。 步骤一：为first和second两个账号生成两个RSA密钥，名字分别为git_first和git_second。当然，这里的名字只是举例，你的名字肯定不一样。如果要用更多的账号，就需生成更多的密钥。 12$ ssh-keygen -t rsa -C "email-address1" # name it git_first when prompted$ ssh-keygen -t rsa -C "email-address2" # name it git_second when prompted 生成密钥后，将公钥里的内容，在对应的Github账号中设置好。 步骤二：创建config文件 123$ cd ~/.ssh$ touch config$ vim config config文件的内容如下。其中，第一个确定了默认的Host，后面的必须另外命名。 12345678Host github.com HostName github.com User git IdentityFile ~/.ssh/git_firstHost git_second HostName github.com User git IdentityFile ~/.ssh/git_second 步骤三、Github仓库repo1和repo2设置要使用的密钥。注意，@之后跟随的Host名称就是上面的config中设置的。 12$ git remote add origin git@github.com:first/repo1.git$ git remote add origin git@git_second:second/repo2.git 同步上游仓库的更新1234$ cd your/repo$ git remote add upstream http://github.com/your-account/upstream-repo.git$ git fetch upstream$ git pull origin master]]></content>
      <categories>
        <category>Git</category>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo建立Sbxlm网站]]></title>
    <url>%2F2019%2F07%2F03%2Fsite-build%2F</url>
    <content type="text"><![CDATA[安装Nodejs和Git根据不同的操作系统，按照通常的方式安装即可。 安装Hexo-cli1$ npm install -g hexo-cli 初始化Sbxlm-hexo12345$ hexo init sbxlm-hexo$ cd sbxlm-hexo$ git init$ npm install$ hexo server 添加NexT主题采用子模块的方式安装，以便今后获取上游的更新。 1$ git submodule add https://github.com/theme-next/hexo-theme-next themes/next 切换和修改NexT主题 修改sbxlm-hexo的_config.yml文件，将theme从默认的landscape改为next。 修改NexT的Scheme，从默认的Muse改为Gemini。]]></content>
      <tags>
        <tag>技巧</tag>
        <tag>Hexo</tag>
        <tag>Sbxlm</tag>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
