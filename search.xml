<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[飞码和快码的优化]]></title>
    <url>%2F2019%2F08%2F15%2Ffmkmyh%2F</url>
    <content type="text"><![CDATA[存在的问题在8.00的飞码和快码中，sbb和sbbb只是简单地放了声笔字，实际上几乎没投入使用，非常浪费。另一方面，飞码和快码的二字词空间非常有限，拥挤得很。 解决的办法将s和sb字开始的二字词房分流到sbb和sbbb空间，编码格式为s1b1b2和s1b1b2b2，码位合计有3150个。四码上的重码用aeiou来选择。不过，遗留的问题是，该空间不能支持在线造词，因为只有一套造词规则。发现有必要的词，只能修改码表，然后重新部署。 飞码中分流的二字词快码中分流的二字词]]></content>
      <tags>
        <tag>飞码</tag>
        <tag>快码</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RIME版声笔双拼优化实验]]></title>
    <url>%2F2019%2F08%2F13%2Fsbspyh%2F</url>
    <content type="text"><![CDATA[利用单字的短码空闲空间由于现在的声笔双拼只考虑了规则编码，所以单字编码在码长为2和3时都有不少的短码空间是空闲的，非常浪费。利用这种空间的办法是，将声笔简码的ss和ssb型二字词插入到该空间中。这种词现在有1098个，频度最高的一些二字词及其编码和频度如下。 1234567891011121314151617181920一个 ygu 997773我们 wmu 812417什么 sm 742524起来 qle 330495因为 yw 317518现在 xz 315893怎么 zm 294900问题 wt 279209经济 jj 257865这么 zmu 225697这些 zx 225430一定 yd 201525如此 rci 194183一点 ydi 189033关系 gx 188400可能 kn 185841而且 vqi 176585心中 xzi 176312地方 df 173581姑娘 gn 168226 如果能充分使用上述简码二字词的话，对输入效率的提升是有帮助的，只是编码格式不一样，需要记忆。 另外，还有少量的sb和sbb型空间没有利用，如何利用？现在还没有考虑好。 利用词组的三码空闲空间目前，声笔双拼中，编码sss是空闲的。优化的措施是，把最常见的词组取前三码作为其简码放在sss空间中，同时也保留它们的全码。也就是说，这种简码不是强制性的。不过，如果用户利用了简码，并且如果四码上有重码词组的话，在选择重码后，重码的词组就可以提前，就会多产生一个四键词组，从而提高输入效率。这种简码词组共有一万多条，下面是一些例子。 12345678910111213141516171819202122没有 mzy 826617什么 sfm 742524自己 zij 741012知道 zid 574771可以 key 432546这个 zeg 404217中国 zsg 336314起来 qil 330495这样 zey 328523已经 yij 325164发展 faz 323016因为 ynw 317518现在 xmz 315893怎么 zfm 294900工作 gsz 287827问题 wft 279209经济 jyj 257865还是 hls 238983出来 cul 238047如果 rug 234912只是 zis 234730爱因斯坦 vys 233485 升级办法将新的sbsp.dict.yaml文件复制的用户文件夹覆盖原来的同名文件，然后将sbsp.userdb文件夹删除，再重新部署，就可以使用了。注意，删除sbsp.userdb文件夹后，你之前所造的词组和产生的调频信息就丢失了，只有重新再来一遍。因为码表有破坏性的变更，与用户数据不一致了，可能产生冲突，无法利用原有的用户数据，非常遗憾。]]></content>
  </entry>
  <entry>
    <title><![CDATA[声笔简码重磅发布]]></title>
    <url>%2F2019%2F08%2F04%2FReleaseSbjm%2F</url>
    <content type="text"><![CDATA[声笔简码已经通过了长期的准备、测试和优化，现在终于发布了！ 它是在声笔码和声笔飞码后，又一次输入法的创新，综合运用了很多独创的黑科技，包括连续字词混合顶屏、自动动态码长调整、精准自动造词、快捷字母选重、字词扩展编码、静态高频字词、字词编码分流、无切换码表反查等。 声笔简码也是对10多年顶功类输入法创新的综合运用，它将再一次对输入法的发展方向产生深远的影响。 更多详情，请移步声笔简码，或者直接下载原生程序或RIME程序。]]></content>
      <tags>
        <tag>声笔简码</tag>
        <tag>输入法</tag>
        <tag>顶功</tag>
        <tag>字母选重</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Rime的声笔系列码现在提供Android安装程序了]]></title>
    <url>%2F2019%2F07%2F23%2Frime4sbxlm%2F</url>
    <content type="text"><![CDATA[缘起在发布Weasel4sbxlm时，我就承诺过会尽快提供对Android的支持，现在就是兑现的时候了。由于增加了对Android的支持，所以名称也改为了Rime4sbxlm，意为基于Rime的声笔系列码。不过，此版程序实际上能兼容同版本号的官方小狼毫和同文，不会对已经安装的输入法方案产生影响。与官方程序的区别主要是，增加了对顶功输入法用小码集字母兼用于选择重码字词的支持。下载链接为：https://github.com/sbxlm/sbxlm.github.io/releases/download/20190723/Rime4sbxlm.rar Rime4sbxlm的主要内容 本Rime4sbxlm主要包括用于Windows和Android的安装程序，以及声笔飞码、声笔快码、声笔双拼和声笔星二码表和方案。 声笔飞码和声笔快码为二码起顶方案，强调单字的效率，同时支持sbbs二字词，但是不收录由三码及以内单字构成的二字词，这是因为这样才能充分利用狭小的二字词空间。另外，三码及以内的单字在熟练后击键率是很高的，也没有必要用二字词的方式来输入。本版飞码和快码还有一个重大改进，那就是三字词和多字词均可以用简拼的方式来输入（虽然要用一个大写字母），实现了二码顶与简拼的共存，这对输入成语等特别有帮助。 声笔双拼和声笔星二则是利用声笔技术分别对传统自然码和二笔输入法的改造，三级单字只用三键就可以输入，重码用aeiou来选择，而不是用笨拙的数字键。这样，它们不但变得更简单，而且效率还更高，操作还更容易。 安装方法在安装小狼毫和同文后，将公共部分和输入法部分的码表和方案复制到用户目录，重新部署并选择方案后就可以使用了。 下一步打算下一步会有一个重大的发布。声笔简码已经通过了长期的准备、测试和优化，也会在近期发布了。它将是在声笔码和声笔飞码后，又一次输入法的创新，综合运用了很多独创的黑科技，敬请期待。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>声笔系列码</tag>
        <tag>Rime</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[首个为声笔系列码定制的小狼毫输入法]]></title>
    <url>%2F2019%2F07%2F19%2Fweasel4sbxlm-0-14-3-0%2F</url>
    <content type="text"><![CDATA[热烈祝贺首个为声笔系列码定制的小狼毫输入法正式发布！顶功输入法现在虽然越来越火，但是现有的平台都有太多的局限性，无法让输入法玩家们玩出更多的花样。利用表示笔画的小码集字母aeiou进行选重是声笔系列码的黑科技之一，一直无法在RIME中实现。于是，我只得硬着头皮改了一下librime的源码，现在终于可以在小狼毫中使用了！当然，自动码长调整等其它声笔技术在RIME平台和其它输入法平台上仍然没有办法使用。不过，已经可以多一种玩法了。祝贺！祝贺！ 等不及了吗？赶快下载Weasel4Sbxlm吧。等一下！MacBook和Android怎么办了？少安毋躁，只有稍等一下了，后续再跟进。 本版输入法的主要内容公共部分 用于Windows的安装程序weasel4sbxlm-0.14.3.0.exe，增加了官方版没有字母选重的功能，仍然可以兼容官方版，不会影响已经有的输入法。 笔画码表（用于笔画反查码表）：bihua.dict.yaml和bihua.schema.yaml 拼音码表（用于拼音反查码表）：pinyin_simp.dict.yaml和pinyin_simp.schema.yaml 本文件：readme.txt 输入法部分这里的声笔飞码即原生程序中的飞码声形模式，而声笔快码则是声韵模式。以下编码格式中，s代表声母，p代表偏旁部首，b代表笔画，y代表韵母，d代表双笔，x代表选择键。 声笔飞码：sbfm.dict.yaml和sbfm.schema.yaml。它的编码格式：单字为spbbx, sbbbx；二字词为sbbsx；三字词为ssSx；多字词为sSssx。 声笔快码：sbkm.dict.yaml和sbkm.schema.yaml。它的编码格式与声笔飞码基本上相同，只需要把spbbx换为sybbx就行了。 声笔双拼：sbsp.dict.yaml和sbsp.schema.yaml。它的编码格式：单字为sybbx，二字词为sysyx，三字词为sssyx；多字词为ssssx。声笔双拼是基于自然码双拼改编的。 声笔星二：sbxv.dict.yaml和sbxv.schema.yaml。它的编码格式：单字为sdbbx，二字词为sdsdx，三字词为sssdx；多字词为ssssx。声笔星二是基于星空二笔改编的。 更多信息要知道更多的信息？请加入声笔系列码交流QQ群445906697。]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>小狼毫</tag>
        <tag>声笔系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主流输入法]]></title>
    <url>%2F2019%2F07%2F17%2Fmain-imes%2F</url>
    <content type="text"><![CDATA[输入法排行榜百度经验最好用的中文输入法十大排名多特输入法排行榜华军输入法排行榜 搜狗输入法搜狗输入法官方网站搜狗输入法百度百科 百度输入法百度输入法官方网站百度输入法百度百科]]></content>
      <tags>
        <tag>输入法</tag>
        <tag>主流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[业界要文]]></title>
    <url>%2F2019%2F07%2F17%2Fkey-articles%2F</url>
    <content type="text"><![CDATA[王小川的互联网江湖：从输入法到AI背后的故事“我是1978年生的人，到今年是40岁，也是改革开放的同龄人。挺感谢这样一个大的时代背景，让自己成为了互联网飞速发展的见证者、参与者，也是受益者。” 具体请看http://news.gmw.cn/xinxi/2019-05/24/content_32864391.htm 搜狗王小川：翻译主场景不是翻译机，而是输入法与搜索从来没指望翻译机为搜狗提供支柱性收入来源，更大意义在于更多地从语言交互上实现AI落地扩展。 具体请看https://www.yicai.com/news/100096100.html 搜狗劫持百度神马等流量构成不正当竞争，3000万罚款创海淀法院同类案件最高纪录6月27日，海淀法院对奇虎公司、百度公司，以及动景公司和神马公司因搜狗输入法通过搜索候选词为搜狗搜索导流量分别起诉搜狗公司等不正当竞争纠纷三案集中宣判。法院一审认定搜狗公司构成不正当竞争，应停止不正当竞争行为，分别为三案原告公开消除影响，向奇虎公司、百度公司各赔偿经济损失500万元等，向动景公司和神马公司共赔偿2000余万元，系海淀法院同类案件罚款最高纪录。 具体请看https://www.yicai.com/news/100241684.html]]></content>
      <tags>
        <tag>业界</tag>
        <tag>要文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何关闭Wow64重定向？]]></title>
    <url>%2F2019%2F07%2F12%2Fdisable-redirect%2F</url>
    <content type="text"><![CDATA[先参见https://blog.csdn.net/karlxzy/article/details/42170419 现在声笔系列输入法的安装要先判断Windows是32位的还是64位的，再通过不同的安装程序来安装，用起来不是很方便。通过关闭Wow64重定向，就可以用一个32位程序同时解决64位和32位Windows输入法的安装问题。]]></content>
      <tags>
        <tag>关闭</tag>
        <tag>Wow64</tag>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下如何判断应用程序是32位的还是64位的？]]></title>
    <url>%2F2019%2F07%2F12%2Fwin32or64%2F</url>
    <content type="text"><![CDATA[方法一：利用任务管理器任务管理器 -&gt; 进程：进程后带有*32的是32位应用程序，否则为64位应用程序。此法仅适用于运行中的应用程序。 方法二：利用简化颜色模式鼠标右击应用程序 -&gt; 属性 -&gt; 兼容性：若设置框中的降低色彩和分辨率的选项可勾选则32位应用程序，否则为64位应用程序。 方法三：查看EXE文件头二进制方式打开应用程序，在文件头中能找到PE..L的是32位的，能找到PE..d的是64位。 来源：改编自https://blog.csdn.net/dayday3923/article/details/78597453]]></content>
      <categories>
        <category>Windows</category>
        <category>应用程序</category>
      </categories>
      <tags>
        <tag>应用程序</tag>
        <tag>32位</tag>
        <tag>64位</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Git的一些技巧]]></title>
    <url>%2F2019%2F07%2F05%2Fgit-tips%2F</url>
    <content type="text"><![CDATA[使用子模块在Git官网上，有针对子模块的专门说明，详见Git Submodules。 添加子模块比如，添加一个子模块DbConnector： 1$ git submodule add https://github.com/chaconinc/DbConnector 克隆带子模块的仓库123$ git clone https://github.com/chaconinc/MainProject$ git submodule init$ git submodule update 以上三个命令也可以用下面引命令代替： 1$ git clone --recursive git clone https://github.com/chaconinc/MainProject 删除子模块采用以下三个步骤：详见Stack Overflow。 123$ git submodule deinit -f -- a/submodule$ rm -rf .git/modules/a/submodule$ git rm -f a/submodule 使用多个账号如何在同一台计算机上使用多个Github账号？要点如下，详细方法见Stack Overflow。 步骤一：为first和second两个账号生成两个RSA密钥，名字分别为git_first和git_second。当然，这里的名字只是举例，你的名字肯定不一样。如果要用更多的账号，就需生成更多的密钥。 12$ ssh-keygen -t rsa -C "email-address1" # name it git_first when prompted$ ssh-keygen -t rsa -C "email-address2" # name it git_second when prompted 生成密钥后，将公钥里的内容，在对应的Github账号中设置好。 步骤二：创建config文件 123$ cd ~/.ssh$ touch config$ vim config config文件的内容如下。其中，第一个确定了默认的Host，后面的必须另外命名。 12345678Host github.com HostName github.com User git IdentityFile ~/.ssh/git_firstHost git_second HostName github.com User git IdentityFile ~/.ssh/git_second 步骤三、Github仓库repo1和repo2设置要使用的密钥。注意，@之后跟随的Host名称就是上面的config中设置的。 12$ git remote add origin git@github.com:first/repo1.git$ git remote add origin git@git_second:second/repo2.git 同步上游仓库的更新1234$ cd your/repo$ git remote add upstream http://github.com/your-account/upstream-repo.git$ git fetch upstream$ git pull origin master]]></content>
      <categories>
        <category>Git</category>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo建立Sbxlm网站]]></title>
    <url>%2F2019%2F07%2F03%2Fsite-build%2F</url>
    <content type="text"><![CDATA[安装Nodejs和Git根据不同的操作系统，按照通常的方式安装即可。 安装Hexo-cli1$ npm install -g hexo-cli 初始化Sbxlm-hexo12345$ hexo init sbxlm-hexo$ cd sbxlm-hexo$ git init$ npm install$ hexo server 添加NexT主题采用子模块的方式安装，以便今后获取上游的更新。 1$ git submodule add https://github.com/theme-next/hexo-theme-next themes/next 切换和修改NexT主题 修改sbxlm-hexo的_config.yml文件，将theme从默认的landscape改为next。 修改NexT的Scheme，从默认的Muse改为Gemini。]]></content>
      <tags>
        <tag>技巧</tag>
        <tag>Hexo</tag>
        <tag>Sbxlm</tag>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
